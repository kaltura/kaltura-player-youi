#if TARGET_OS_SIMULATOR // merged by cocoapods-binary

// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef KALTURAPLAYER_SWIFT_H
#define KALTURAPLAYER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import PlayKit;
@import PlayKitProviders;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KalturaPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("DMSConfig")
@interface DMSConfig : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface DMSConfig (SWIFT_EXTENSION(KalturaPlayer))
@property (nonatomic, copy) NSString * _Nullable analyticsUrl;
@property (nonatomic, copy) NSDate * _Nullable createdDate;
@property (nonatomic) int64_t ovpPartnerId;
@property (nonatomic, copy) NSString * _Nullable ovpServiceUrl;
@property (nonatomic) int64_t partnerId;
@property (nonatomic) int64_t uiConfId;
@end

@class KalturaPlayerView;
@class PlayerOptions;
@class PKMediaEntry;
@class MediaOptions;
@class PKPlayerSettings;
@class PKEvent;
@protocol PKController;
@class PKTimeRange;

SWIFT_CLASS("_TtC13KalturaPlayer13KalturaPlayer")
@interface KalturaPlayer : NSObject
/// The player’s view which the media will be displayed within.
@property (nonatomic, strong) KalturaPlayerView * _Nullable view;
/// Update the player’s initialized options.
/// \param playerOptions A new player options.
///
- (void)updatePlayerOptions:(PlayerOptions * _Nonnull)playerOptions;
/// Set the player’s MediaEntry.
/// \param media The media entry.
///
/// \param options Additional media options. See <code>MediaOptions</code>.
///
- (void)setMedia:(PKMediaEntry * _Nonnull)media options:(MediaOptions * _Nullable)options;
/// Call in order to prepare the media on the player.
/// note:
///
/// When the PlayerOptions preload is set too true, this function will be called automatically.
- (void)prepare;
/// The player’s settings.
@property (nonatomic, readonly, strong) PKPlayerSettings * _Nonnull settings;
/// The current media format.
@property (nonatomic, readonly) enum MediaFormat mediaFormat;
/// The player’s session id. The <code>sessionId</code> is initialized when the player loads.
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
/// Add an observation to a relevant event.
/// \param observer The object that will be the observer.
///
/// \param event Which <code>KPEvent</code> to observe.
///
/// \param block The callback function that will be called.
///
- (void)addObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
/// Add an observation to relevant events.
/// \param observer The object that will be the observer.
///
/// \param events A list of <code>KPEvent</code>’s too observe.
///
/// \param block The callback function that will be called.
///
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
/// Remove the observer for an event.
/// \param observer The object that the observation will be removed from.
///
/// \param event Which <code>KPEvent</code> to remove the observation from.
///
- (void)removeObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event;
/// Remove the observer from the events.
/// \param observer The object that the observation will be removed from.
///
/// \param events A list of <code>KPEvent</code>’s to remove the observation from.
///
- (void)removeObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events;
/// Update a Plugin Config.
/// \param pluginName The Plugin name.
///
/// \param config The Plugin configuration object.
///
- (void)updatePluginConfigWithPluginName:(NSString * _Nonnull)pluginName config:(id _Nonnull)config;
/// Updates the styling from the settings textTrackStyling object
- (void)updateTextTrackStyling;
/// Indicates if current media is Live.
///
/// returns:
/// <code>true</code> if it’s live, <code>false</code> otherwise.
- (BOOL)isLive SWIFT_WARN_UNUSED_RESULT;
/// Getter for a playkit controller.
/// \param type The required <code>PKController</code> class type.
///
///
/// returns:
/// The relevant controller if exist, <code>nil</code> otherwise.
- (id <PKController> _Nullable)getControllerWithType:(Class <PKController> _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// The player’s duration.
@property (nonatomic, readonly) NSTimeInterval duration;
/// The player’s currentState.
@property (nonatomic, readonly) enum PlayerState currentState;
/// Indicates if the player is playing.
@property (nonatomic, readonly) BOOL isPlaying;
/// The current player’s time.
@property (nonatomic) NSTimeInterval currentTime;
/// The current program time (PROGRAM-DATE-TIME).
@property (nonatomic, readonly, copy) NSDate * _Nullable currentProgramTime;
/// Get the player’s current audio track.
@property (nonatomic, readonly, copy) NSString * _Nullable currentAudioTrack;
/// Get the player’s current text track.
@property (nonatomic, readonly, copy) NSString * _Nullable currentTextTrack;
/// Indicates the desired rate of playback, 0.0 means “paused”, 1.0 indicates a desire to play at the natural rate of the current item.
/// important:
/// Do not use the rate to indicate whether to play or pause! Use the isPlaying property.
@property (nonatomic) float rate;
/// The audio playback volume for the player, ranging from 0.0 through 1.0 on a linear scale.
@property (nonatomic) float volume;
/// Provides a collection of time ranges for which the player has the media data readily available. The ranges provided might be discontinuous.
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable loadedTimeRanges;
/// Send a play action for the player.
- (void)play;
/// Send a pause action for the player.
- (void)pause;
/// Send a resume action for the player.
- (void)resume;
/// Send a stop action for the player.
- (void)stop;
/// Send a replay action for the player.
- (void)replay;
/// Send a seek action for the player.
- (void)seekTo:(NSTimeInterval)time;
/// Select a Track
- (void)selectTrackWithTrackId:(NSString * _Nonnull)trackId;
/// Release the player’s resources.
- (void)destroy;
/// Starts buffering the entry.
/// Call this function if the player’s <code>settings.network.autoBuffer</code> is set too false. Otherwise it is done automatically.
- (void)startBuffering;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DRMParams;

SWIFT_CLASS("_TtC13KalturaPlayer18KalturaBasicPlayer")
@interface KalturaBasicPlayer : KalturaPlayer
/// Set up the Kaltura Player.
/// The setup will register any Kaltura’s plugin which will be added in the pod file.
/// Supporting <code>PlayKit_IMA</code> and <code>PlayKitYoubora</code> pods.
+ (void)setup;
/// A Kaltura Player for external media.
/// Create the player options, <code>BasicPlayerOptions</code>, and pass it to the <code>KalturaBasicPlayer</code>.
/// Check the <code>BasicPlayerOptions</code> for more info regarding the available options and defaults.
/// Create a <code>KalturaPlayerView</code> in the code or in the xib and pass it to the <code>KalturaBasicPlayer</code>.
/// <em>Example:</em>
/// \code
/// let basicPlayerOptions = BasicPlayerOptions()
/// let kalturaBasicPlayer = KalturaBasicPlayer(options: basicPlayerOptions)
/// kalturaBasicPlayer.view = kalturaPlayerView
///
/// \endcode\param basicPlayerOptions The player’s initialize options.
///
- (nonnull instancetype)initWithOptions:(PlayerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
/// Set up the player’s MediaEntry.
/// \param id An identifier for the media entry.
///
/// \param contentUrl The content url.
///
/// \param drmData The DRM data if exists.
///
/// \param mediaFormat The media’s format.
///
/// \param mediaType The media type.
///
/// \param mediaOptions Additional media options. See <code>MediaOptions</code>.
///
- (void)setupMediaEntryWithId:(NSString * _Nonnull)id contentUrl:(NSURL * _Nonnull)contentUrl drmData:(NSArray<DRMParams *> * _Nullable)drmData mediaFormat:(enum MediaFormat)mediaFormat mediaType:(enum MediaType)mediaType mediaOptions:(MediaOptions * _Nullable)mediaOptions;
@end

@class OTTMediaOptions;

SWIFT_CLASS("_TtC13KalturaPlayer16KalturaOTTPlayer")
@interface KalturaOTTPlayer : KalturaPlayer
/// Set up the Kaltura OTT Player with the Partner ID and the Server URL.
/// The setup will request the DMS Configuration required for the player, register the <code>KavaPlugin</code> and the <code>PhoenixAnalyticsPlugin</code>.
/// In addition the setup will register any Kaltura’s plugin which will be added in the pod file.
/// Supporting <code>PlayKit_IMA</code> and <code>PlayKitYoubora</code> pods.
/// \param partnerId The OTT Partner ID.
///
/// \param serverURL The OTT Server URL.
///
/// \param referrer A custom referrer. Default value, the application bundle id.
///
+ (void)setupWithPartnerId:(int64_t)partnerId serverURL:(NSString * _Nonnull)serverURL referrer:(NSString * _Nullable)referrer;
/// A Kaltura Player for OTT Clients. Kava and Phoenix Analytics embeded.
/// Create the player options, <code>PlayerOptions</code>, and pass it to the <code>KalturaOTTPlayer</code>.
/// Check the <code>PlayerOptions</code> for more info regarding the available options and defaults.
/// Create a <code>KalturaPlayerView</code> in the code or in the xib and pass it to the <code>KalturaOTTPlayer</code>.
/// <em>Example:</em>
/// \code
/// let playerOptions = PlayerOptions()
/// let kalturaOTTPlayer = KalturaOTTPlayer(options: playerOptions)
/// kalturaOTTPlayer.view = kalturaPlayerView
///
/// \endcode\param options The player’s initialize options.
///
- (nonnull instancetype)initWithOptions:(PlayerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
/// Loads the media with the provided media options.
/// Will set the MediaEntry and automatically prepare the media in case the <code>PlayerOptions</code> autoPlay or preload is set to true, which is the default value. Call prepare manually in case the autoPlay and preload was set to false.
/// In case an error occurred retrieving the media from the provider, the error will return in the callback function.
/// Kava and Phoenix Analytics is updated automatically.
/// \param options The media options. See <code>OTTMediaOptions</code> for more details.
///
/// \param callback 
///
/// \param error A <code>KalturaPlayerError</code> in case of an issue. See <code>KalturaPlayerError</code> for more details.
///
- (void)loadMediaWithOptions:(OTTMediaOptions * _Nonnull)options callback:(void (^ _Nonnull)(NSError * _Nullable))callback;
@end


@class NSCoder;

SWIFT_CLASS("_TtC13KalturaPlayer17KalturaPlayerView")
@interface KalturaPlayerView : UIView
/// This is the video mode on the view, a.k.a videoGravity.
/// <em>Available Values</em>
/// <ul>
///   <li>
///     <em>scaleAspectFill;</em>
///     videoGravity = .resizeAspectFill
///   </li>
///   <li>
///     <em>scaleAspectFit;</em>
///     videoGravity = .resizeAspect
///   </li>
///   <li>
///     <em>scaleToFill;</em>
///     videoGravity = .resize
///   </li>
/// </ul>
/// <em>Default</em>
/// scaleAspectFit
@property (nonatomic) UIViewContentMode contentMode;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13KalturaPlayer12MediaOptions")
@interface MediaOptions : NSObject
/// Sets the media with a start time if set with a value.
/// If not set, the media will start from the default value per media type:
/// <ul>
///   <li>
///     In case of vod, 0.
///   </li>
///   <li>
///     In case of live, the live edge.
///   </li>
/// </ul>
@property (nonatomic) NSTimeInterval startTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13KalturaPlayer15OTTMediaOptions")
@interface OTTMediaOptions : MediaOptions
@property (nonatomic, copy) NSString * _Nullable ks;
@property (nonatomic, copy) NSString * _Nullable assetId;
@property (nonatomic) enum AssetType assetType;
@property (nonatomic) enum AssetReferenceType assetReferenceType;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable formats;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable fileIds;
@property (nonatomic) enum PlaybackContextType playbackContextType;
@property (nonatomic, copy) NSString * _Nullable networkProtocol;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PluginConfig;

SWIFT_CLASS("_TtC13KalturaPlayer13PlayerOptions")
@interface PlayerOptions : NSObject
/// Performs prepare on the player once the MediaEntry is set with a new value.
/// <em>Default: true</em>
/// If set too false and autoPlay is also set too false, the prepare will not be called automatically and will need to be called separately.
@property (nonatomic) BOOL preload;
/// Performs play on the player once the media has been prepared.
/// <em>Default: true</em>
/// If set too false, the play will not be called automatically and will need to be called separately.
/// The value of autoPlay effects preload; Refer to preload for more details.
@property (nonatomic) BOOL autoPlay;
/// Sets up the player with the Plugins provided.
/// The PluginConfig object is initialized with a dictionary of plugins.
/// \code
/// [String: Any]
///
/// \endcode<em>Example:</em>
/// \code
/// let kavaPluginConfig = KavaPluginConfig(partnerId: 1091)
/// let pluginConfig = PluginConfig(config: [KavaPlugin.pluginName: kavaPluginConfig])
///
/// \endcode
@property (nonatomic, strong) PluginConfig * _Nonnull pluginConfig;
/// Set up the player with the player KS.
@property (nonatomic, copy) NSString * _Nullable ks;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif


#else // merged by cocoapods-binary

// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef KALTURAPLAYER_SWIFT_H
#define KALTURAPLAYER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import PlayKit;
@import PlayKitProviders;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KalturaPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("DMSConfig")
@interface DMSConfig : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface DMSConfig (SWIFT_EXTENSION(KalturaPlayer))
@property (nonatomic, copy) NSString * _Nullable analyticsUrl;
@property (nonatomic, copy) NSDate * _Nullable createdDate;
@property (nonatomic) int64_t ovpPartnerId;
@property (nonatomic, copy) NSString * _Nullable ovpServiceUrl;
@property (nonatomic) int64_t partnerId;
@property (nonatomic) int64_t uiConfId;
@end

@class KalturaPlayerView;
@class PlayerOptions;
@class PKMediaEntry;
@class MediaOptions;
@class PKPlayerSettings;
@class PKEvent;
@protocol PKController;
@class PKTimeRange;

SWIFT_CLASS("_TtC13KalturaPlayer13KalturaPlayer")
@interface KalturaPlayer : NSObject
/// The player’s view which the media will be displayed within.
@property (nonatomic, strong) KalturaPlayerView * _Nullable view;
/// Update the player’s initialized options.
/// \param playerOptions A new player options.
///
- (void)updatePlayerOptions:(PlayerOptions * _Nonnull)playerOptions;
/// Set the player’s MediaEntry.
/// \param media The media entry.
///
/// \param options Additional media options. See <code>MediaOptions</code>.
///
- (void)setMedia:(PKMediaEntry * _Nonnull)media options:(MediaOptions * _Nullable)options;
/// Call in order to prepare the media on the player.
/// note:
///
/// When the PlayerOptions preload is set too true, this function will be called automatically.
- (void)prepare;
/// The player’s settings.
@property (nonatomic, readonly, strong) PKPlayerSettings * _Nonnull settings;
/// The current media format.
@property (nonatomic, readonly) enum MediaFormat mediaFormat;
/// The player’s session id. The <code>sessionId</code> is initialized when the player loads.
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
/// Add an observation to a relevant event.
/// \param observer The object that will be the observer.
///
/// \param event Which <code>KPEvent</code> to observe.
///
/// \param block The callback function that will be called.
///
- (void)addObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
/// Add an observation to relevant events.
/// \param observer The object that will be the observer.
///
/// \param events A list of <code>KPEvent</code>’s too observe.
///
/// \param block The callback function that will be called.
///
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
/// Remove the observer for an event.
/// \param observer The object that the observation will be removed from.
///
/// \param event Which <code>KPEvent</code> to remove the observation from.
///
- (void)removeObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event;
/// Remove the observer from the events.
/// \param observer The object that the observation will be removed from.
///
/// \param events A list of <code>KPEvent</code>’s to remove the observation from.
///
- (void)removeObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events;
/// Update a Plugin Config.
/// \param pluginName The Plugin name.
///
/// \param config The Plugin configuration object.
///
- (void)updatePluginConfigWithPluginName:(NSString * _Nonnull)pluginName config:(id _Nonnull)config;
/// Updates the styling from the settings textTrackStyling object
- (void)updateTextTrackStyling;
/// Indicates if current media is Live.
///
/// returns:
/// <code>true</code> if it’s live, <code>false</code> otherwise.
- (BOOL)isLive SWIFT_WARN_UNUSED_RESULT;
/// Getter for a playkit controller.
/// \param type The required <code>PKController</code> class type.
///
///
/// returns:
/// The relevant controller if exist, <code>nil</code> otherwise.
- (id <PKController> _Nullable)getControllerWithType:(Class <PKController> _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// The player’s duration.
@property (nonatomic, readonly) NSTimeInterval duration;
/// The player’s currentState.
@property (nonatomic, readonly) enum PlayerState currentState;
/// Indicates if the player is playing.
@property (nonatomic, readonly) BOOL isPlaying;
/// The current player’s time.
@property (nonatomic) NSTimeInterval currentTime;
/// The current program time (PROGRAM-DATE-TIME).
@property (nonatomic, readonly, copy) NSDate * _Nullable currentProgramTime;
/// Get the player’s current audio track.
@property (nonatomic, readonly, copy) NSString * _Nullable currentAudioTrack;
/// Get the player’s current text track.
@property (nonatomic, readonly, copy) NSString * _Nullable currentTextTrack;
/// Indicates the desired rate of playback, 0.0 means “paused”, 1.0 indicates a desire to play at the natural rate of the current item.
/// important:
/// Do not use the rate to indicate whether to play or pause! Use the isPlaying property.
@property (nonatomic) float rate;
/// The audio playback volume for the player, ranging from 0.0 through 1.0 on a linear scale.
@property (nonatomic) float volume;
/// Provides a collection of time ranges for which the player has the media data readily available. The ranges provided might be discontinuous.
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable loadedTimeRanges;
/// Send a play action for the player.
- (void)play;
/// Send a pause action for the player.
- (void)pause;
/// Send a resume action for the player.
- (void)resume;
/// Send a stop action for the player.
- (void)stop;
/// Send a replay action for the player.
- (void)replay;
/// Send a seek action for the player.
- (void)seekTo:(NSTimeInterval)time;
/// Select a Track
- (void)selectTrackWithTrackId:(NSString * _Nonnull)trackId;
/// Release the player’s resources.
- (void)destroy;
/// Starts buffering the entry.
/// Call this function if the player’s <code>settings.network.autoBuffer</code> is set too false. Otherwise it is done automatically.
- (void)startBuffering;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DRMParams;

SWIFT_CLASS("_TtC13KalturaPlayer18KalturaBasicPlayer")
@interface KalturaBasicPlayer : KalturaPlayer
/// Set up the Kaltura Player.
/// The setup will register any Kaltura’s plugin which will be added in the pod file.
/// Supporting <code>PlayKit_IMA</code> and <code>PlayKitYoubora</code> pods.
+ (void)setup;
/// A Kaltura Player for external media.
/// Create the player options, <code>BasicPlayerOptions</code>, and pass it to the <code>KalturaBasicPlayer</code>.
/// Check the <code>BasicPlayerOptions</code> for more info regarding the available options and defaults.
/// Create a <code>KalturaPlayerView</code> in the code or in the xib and pass it to the <code>KalturaBasicPlayer</code>.
/// <em>Example:</em>
/// \code
/// let basicPlayerOptions = BasicPlayerOptions()
/// let kalturaBasicPlayer = KalturaBasicPlayer(options: basicPlayerOptions)
/// kalturaBasicPlayer.view = kalturaPlayerView
///
/// \endcode\param basicPlayerOptions The player’s initialize options.
///
- (nonnull instancetype)initWithOptions:(PlayerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
/// Set up the player’s MediaEntry.
/// \param id An identifier for the media entry.
///
/// \param contentUrl The content url.
///
/// \param drmData The DRM data if exists.
///
/// \param mediaFormat The media’s format.
///
/// \param mediaType The media type.
///
/// \param mediaOptions Additional media options. See <code>MediaOptions</code>.
///
- (void)setupMediaEntryWithId:(NSString * _Nonnull)id contentUrl:(NSURL * _Nonnull)contentUrl drmData:(NSArray<DRMParams *> * _Nullable)drmData mediaFormat:(enum MediaFormat)mediaFormat mediaType:(enum MediaType)mediaType mediaOptions:(MediaOptions * _Nullable)mediaOptions;
@end

@class OTTMediaOptions;

SWIFT_CLASS("_TtC13KalturaPlayer16KalturaOTTPlayer")
@interface KalturaOTTPlayer : KalturaPlayer
/// Set up the Kaltura OTT Player with the Partner ID and the Server URL.
/// The setup will request the DMS Configuration required for the player, register the <code>KavaPlugin</code> and the <code>PhoenixAnalyticsPlugin</code>.
/// In addition the setup will register any Kaltura’s plugin which will be added in the pod file.
/// Supporting <code>PlayKit_IMA</code> and <code>PlayKitYoubora</code> pods.
/// \param partnerId The OTT Partner ID.
///
/// \param serverURL The OTT Server URL.
///
/// \param referrer A custom referrer. Default value, the application bundle id.
///
+ (void)setupWithPartnerId:(int64_t)partnerId serverURL:(NSString * _Nonnull)serverURL referrer:(NSString * _Nullable)referrer;
/// A Kaltura Player for OTT Clients. Kava and Phoenix Analytics embeded.
/// Create the player options, <code>PlayerOptions</code>, and pass it to the <code>KalturaOTTPlayer</code>.
/// Check the <code>PlayerOptions</code> for more info regarding the available options and defaults.
/// Create a <code>KalturaPlayerView</code> in the code or in the xib and pass it to the <code>KalturaOTTPlayer</code>.
/// <em>Example:</em>
/// \code
/// let playerOptions = PlayerOptions()
/// let kalturaOTTPlayer = KalturaOTTPlayer(options: playerOptions)
/// kalturaOTTPlayer.view = kalturaPlayerView
///
/// \endcode\param options The player’s initialize options.
///
- (nonnull instancetype)initWithOptions:(PlayerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
/// Loads the media with the provided media options.
/// Will set the MediaEntry and automatically prepare the media in case the <code>PlayerOptions</code> autoPlay or preload is set to true, which is the default value. Call prepare manually in case the autoPlay and preload was set to false.
/// In case an error occurred retrieving the media from the provider, the error will return in the callback function.
/// Kava and Phoenix Analytics is updated automatically.
/// \param options The media options. See <code>OTTMediaOptions</code> for more details.
///
/// \param callback 
///
/// \param error A <code>KalturaPlayerError</code> in case of an issue. See <code>KalturaPlayerError</code> for more details.
///
- (void)loadMediaWithOptions:(OTTMediaOptions * _Nonnull)options callback:(void (^ _Nonnull)(NSError * _Nullable))callback;
@end


@class NSCoder;

SWIFT_CLASS("_TtC13KalturaPlayer17KalturaPlayerView")
@interface KalturaPlayerView : UIView
/// This is the video mode on the view, a.k.a videoGravity.
/// <em>Available Values</em>
/// <ul>
///   <li>
///     <em>scaleAspectFill;</em>
///     videoGravity = .resizeAspectFill
///   </li>
///   <li>
///     <em>scaleAspectFit;</em>
///     videoGravity = .resizeAspect
///   </li>
///   <li>
///     <em>scaleToFill;</em>
///     videoGravity = .resize
///   </li>
/// </ul>
/// <em>Default</em>
/// scaleAspectFit
@property (nonatomic) UIViewContentMode contentMode;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13KalturaPlayer12MediaOptions")
@interface MediaOptions : NSObject
/// Sets the media with a start time if set with a value.
/// If not set, the media will start from the default value per media type:
/// <ul>
///   <li>
///     In case of vod, 0.
///   </li>
///   <li>
///     In case of live, the live edge.
///   </li>
/// </ul>
@property (nonatomic) NSTimeInterval startTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13KalturaPlayer15OTTMediaOptions")
@interface OTTMediaOptions : MediaOptions
@property (nonatomic, copy) NSString * _Nullable ks;
@property (nonatomic, copy) NSString * _Nullable assetId;
@property (nonatomic) enum AssetType assetType;
@property (nonatomic) enum AssetReferenceType assetReferenceType;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable formats;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable fileIds;
@property (nonatomic) enum PlaybackContextType playbackContextType;
@property (nonatomic, copy) NSString * _Nullable networkProtocol;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PluginConfig;

SWIFT_CLASS("_TtC13KalturaPlayer13PlayerOptions")
@interface PlayerOptions : NSObject
/// Performs prepare on the player once the MediaEntry is set with a new value.
/// <em>Default: true</em>
/// If set too false and autoPlay is also set too false, the prepare will not be called automatically and will need to be called separately.
@property (nonatomic) BOOL preload;
/// Performs play on the player once the media has been prepared.
/// <em>Default: true</em>
/// If set too false, the play will not be called automatically and will need to be called separately.
/// The value of autoPlay effects preload; Refer to preload for more details.
@property (nonatomic) BOOL autoPlay;
/// Sets up the player with the Plugins provided.
/// The PluginConfig object is initialized with a dictionary of plugins.
/// \code
/// [String: Any]
///
/// \endcode<em>Example:</em>
/// \code
/// let kavaPluginConfig = KavaPluginConfig(partnerId: 1091)
/// let pluginConfig = PluginConfig(config: [KavaPlugin.pluginName: kavaPluginConfig])
///
/// \endcode
@property (nonatomic, strong) PluginConfig * _Nonnull pluginConfig;
/// Set up the player with the player KS.
@property (nonatomic, copy) NSString * _Nullable ks;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif


#endif // merged by cocoapods-binary