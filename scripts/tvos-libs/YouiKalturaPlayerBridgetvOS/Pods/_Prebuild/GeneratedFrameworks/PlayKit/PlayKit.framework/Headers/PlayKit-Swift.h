#if TARGET_OS_SIMULATOR // merged by cocoapods-binary

// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef PLAYKIT_SWIFT_H
#define PLAYKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PlayKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class AVPlayerItem;

/// An AVPlayerEngine is a controller used to manage the playback and timing of a media asset.
/// It provides the interface to control the player’s behavior such as its ability to play, pause, and seek to various points in the timeline.
SWIFT_CLASS("_TtC7PlayKit14AVPlayerEngine")
@interface AVPlayerEngine : AVPlayer
@property (nonatomic) float rate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)pause;
- (void)play;
- (void)playImmediatelyAtRate:(float)rate SWIFT_AVAILABILITY(tvos,introduced=10.0) SWIFT_AVAILABILITY(ios,introduced=10.0);
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end


@interface AVPlayerEngine (SWIFT_EXTENSION(PlayKit))
- (void)replaceCurrentItemWithPlayerItem:(AVPlayerItem * _Nullable)item;
@end



@interface AVPlayerEngine (SWIFT_EXTENSION(PlayKit))
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

enum PlayerState : NSInteger;
@class PlayerView;
@class PKTimeRange;
@class MediaConfig;

SWIFT_PROTOCOL("_TtP7PlayKit11BasicPlayer_")
@protocol BasicPlayer
/// The player’s duration.
@property (nonatomic, readonly) NSTimeInterval duration;
/// The player’s currentState.
@property (nonatomic, readonly) enum PlayerState currentState;
/// Indicates if the player is playing.
@property (nonatomic, readonly) BOOL isPlaying;
/// The player’s view component.
@property (nonatomic, weak) PlayerView * _Nullable view;
/// The current player’s time.
@property (nonatomic) NSTimeInterval currentTime;
/// The current program time (PROGRAM-DATE-TIME).
@property (nonatomic, readonly, copy) NSDate * _Nullable currentProgramTime;
/// Get the player’s current audio track.
@property (nonatomic, readonly, copy) NSString * _Nullable currentAudioTrack;
/// Get the player’s current text track.
@property (nonatomic, readonly, copy) NSString * _Nullable currentTextTrack;
/// Indicates the desired rate of playback, 0.0 means “paused”, 1.0 indicates a desire to play at the natural rate of the current item.
/// Note: Do not use the rate to indicate whether to play or pause! Use the isPlaying property.
@property (nonatomic) float rate;
/// The audio playback volume for the player, ranging from 0.0 through 1.0 on a linear scale.
@property (nonatomic) float volume;
/// Provides a collection of time ranges for which the player has the media data readily available. The ranges provided might be discontinuous.
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable loadedTimeRanges;
/// Send a play action for the player.
- (void)play;
/// Send a pause action for the player.
- (void)pause;
/// Send a resume action for the player.
- (void)resume;
/// Send a stop action for the player.
- (void)stop;
/// Send a replay action for the player.
- (void)replay;
/// Send a seek action for the player.
- (void)seekTo:(NSTimeInterval)time;
/// Select a Track
- (void)selectTrackWithTrackId:(NSString * _Nonnull)trackId;
/// Release the player’s resources.
- (void)destroy;
/// Prepare for playing an entry.
/// If player network setting autoBuffer is set to true, prepare starts buffering the entry.
/// Otherwise, if autoBuffer is set to false, need to call startBuffering manually.
- (void)prepare:(MediaConfig * _Nonnull)config;
/// Starts buffering the entry.
- (void)startBuffering;
@end

@class PKEvent;
@class PKMediaSource;
@protocol AssetHandler;
@class PKTextTrackStyling;

SWIFT_PROTOCOL("_TtP7PlayKit12PlayerEngine_")
@protocol PlayerEngine <BasicPlayer>
/// Fired when an event is triggred.
@property (nonatomic, copy) void (^ _Nullable onEventBlock)(PKEvent * _Nonnull);
/// The player’s start position.
@property (nonatomic) NSTimeInterval startPosition;
/// The player’s current position.
@property (nonatomic) NSTimeInterval currentPosition;
/// The current media config that was set.
@property (nonatomic, strong) MediaConfig * _Nullable mediaConfig;
/// The media playback type.
@property (nonatomic, readonly, copy) NSString * _Nullable playbackType;
/// Load the media to the player.
- (void)loadMediaFrom:(PKMediaSource * _Nullable)mediaSource handler:(id <AssetHandler> _Nonnull)handler;
/// Plays the live media from the live edge.
- (void)playFromLiveEdge;
/// Update the text tracks styling.
- (void)updateTextTrackStyling:(PKTextTrackStyling * _Nonnull)textTrackStyling;
@end


SWIFT_CLASS("_TtC7PlayKit15AVPlayerWrapper")
@interface AVPlayerWrapper : NSObject <PlayerEngine>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) void (^ _Nullable onEventBlock)(PKEvent * _Nonnull);
@property (nonatomic) NSTimeInterval startPosition;
@property (nonatomic) NSTimeInterval currentPosition;
@property (nonatomic, strong) MediaConfig * _Nullable mediaConfig;
@property (nonatomic, readonly, copy) NSString * _Nullable playbackType;
- (void)loadMediaFrom:(PKMediaSource * _Nullable)mediaSource handler:(id <AssetHandler> _Nonnull)handler;
- (void)playFromLiveEdge;
- (void)updateTextTrackStyling:(PKTextTrackStyling * _Nonnull)textTrackStyling;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) enum PlayerState currentState;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic, weak) PlayerView * _Nullable view;
@property (nonatomic) NSTimeInterval currentTime;
@property (nonatomic, readonly, copy) NSDate * _Nullable currentProgramTime;
@property (nonatomic, readonly, copy) NSString * _Nullable currentAudioTrack;
@property (nonatomic, readonly, copy) NSString * _Nullable currentTextTrack;
@property (nonatomic) float rate;
@property (nonatomic) float volume;
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable loadedTimeRanges;
- (void)play;
- (void)pause;
- (void)resume;
- (void)stop;
- (void)replay;
- (void)seekTo:(NSTimeInterval)time;
- (void)selectTrackWithTrackId:(NSString * _Nonnull)trackId;
- (void)destroy;
- (void)prepare:(MediaConfig * _Nonnull)mediaConfig;
- (void)startBuffering;
@end



/// PKEvent
SWIFT_CLASS("_TtC7PlayKit7PKEvent")
@interface PKEvent : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable data;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit7AdEvent")
@interface AdEvent : PKEvent
/// <hr/>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SWIFT_METATYPE(AdEvent)> * _Nonnull allEventTypes;)
+ (NSArray<SWIFT_METATYPE(AdEvent)> * _Nonnull)allEventTypes SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull streamLoaded;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)streamLoaded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull streamStarted;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)streamStarted SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adBreakReady;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adBreakReady SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adBreakStarted;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adBreakStarted SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adBreakEnded;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adBreakEnded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adPeriodStarted;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adPeriodStarted SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adPeriodEnded;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adPeriodEnded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull allAdsCompleted;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)allAdsCompleted SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adComplete;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adComplete SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adClicked;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adClicked SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adFirstQuartile;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adFirstQuartile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adLoaded;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adLoaded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adLog;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adLog SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adMidpoint;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adMidpoint SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adPaused;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adPaused SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adResumed;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adResumed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adSkipped;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adSkipped SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adStarted;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adStarted SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adTapped;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adTapped SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adThirdQuartile;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adThirdQuartile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adDidProgressToTime;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adDidProgressToTime SWIFT_WARN_UNUSED_RESULT;
/// Ad requested the content to pause (before ad starts playing)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adDidRequestContentPause;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adDidRequestContentPause SWIFT_WARN_UNUSED_RESULT;
/// Ad requested content resume (when finished playing ads or when error occurs and playback needs to continue)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adDidRequestContentResume;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adDidRequestContentResume SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull webOpenerEvent;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)webOpenerEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerWillOpenExternalBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerWillOpenExternalBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerWillOpenInAppBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerWillOpenInAppBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerDidOpenInAppBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerDidOpenInAppBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerWillCloseInAppBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerWillCloseInAppBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerDidCloseInAppBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerDidCloseInAppBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adCuePointsUpdate;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adCuePointsUpdate SWIFT_WARN_UNUSED_RESULT;
/// Sent when an ad started buffering
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adStartedBuffering;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adStartedBuffering SWIFT_WARN_UNUSED_RESULT;
/// Sent when ad finished buffering and ready for playback
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adPlaybackReady;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adPlaybackReady SWIFT_WARN_UNUSED_RESULT;
/// Sent when the ads request timed out.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull requestTimedOut;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)requestTimedOut SWIFT_WARN_UNUSED_RESULT;
/// delivered when ads request was sent.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adsRequested;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adsRequested SWIFT_WARN_UNUSED_RESULT;
/// Sent when an error occurs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull error;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit15AdEventDataKeys")
@interface AdEventDataKeys : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The position type of the ad according to the content timeline.
typedef SWIFT_ENUM(NSInteger, AdPositionType, closed) {
  AdPositionTypePreRoll = 0,
  AdPositionTypeMidRoll = 1,
  AdPositionTypePostRoll = 2,
};


SWIFT_CLASS("_TtC7PlayKit19PlayerEngineWrapper")
@interface PlayerEngineWrapper : NSObject <PlayerEngine>
@property (nonatomic, copy) void (^ _Nullable onEventBlock)(PKEvent * _Nonnull);
@property (nonatomic) NSTimeInterval startPosition;
@property (nonatomic) NSTimeInterval currentPosition;
@property (nonatomic, strong) MediaConfig * _Nullable mediaConfig;
@property (nonatomic, readonly, copy) NSString * _Nullable playbackType;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) enum PlayerState currentState;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic, strong) PlayerView * _Nullable view;
@property (nonatomic) NSTimeInterval currentTime;
@property (nonatomic, readonly, copy) NSDate * _Nullable currentProgramTime;
@property (nonatomic, readonly, copy) NSString * _Nullable currentAudioTrack;
@property (nonatomic, readonly, copy) NSString * _Nullable currentTextTrack;
@property (nonatomic) float rate;
@property (nonatomic) float volume;
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable loadedTimeRanges;
- (void)loadMediaFrom:(PKMediaSource * _Nullable)mediaSource handler:(id <AssetHandler> _Nonnull)handler;
- (void)playFromLiveEdge;
- (void)updateTextTrackStyling:(PKTextTrackStyling * _Nonnull)textTrackStyling;
- (void)play;
- (void)pause;
- (void)resume;
- (void)stop;
- (void)replay;
- (void)seekTo:(NSTimeInterval)time;
- (void)selectTrackWithTrackId:(NSString * _Nonnull)trackId;
- (void)destroy;
- (void)prepare:(MediaConfig * _Nonnull)config;
- (void)startBuffering;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit25AdsDAIPlayerEngineWrapper")
@interface AdsDAIPlayerEngineWrapper : PlayerEngineWrapper
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/// <hr/>
@property (nonatomic) NSTimeInterval currentPosition;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic) NSTimeInterval currentTime;
- (void)loadMediaFrom:(PKMediaSource * _Nullable)mediaSource handler:(id <AssetHandler> _Nonnull)handler;
- (void)play;
- (void)pause;
- (void)resume;
- (void)stop;
- (void)replay;
- (void)seekTo:(NSTimeInterval)time;
- (void)destroy;
- (void)prepare:(MediaConfig * _Nonnull)config;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class PKMediaEntry;
@class PKPlayerSettings;
enum MediaFormat : NSInteger;
@protocol PKController;
@protocol PKBoundary;

SWIFT_PROTOCOL("_TtP7PlayKit6Player_")
@protocol Player <BasicPlayer>
/// The player’s associated media entry.
@property (nonatomic, readonly, weak) PKMediaEntry * _Nullable mediaEntry;
/// The player’s settings.
@property (nonatomic, readonly, strong) PKPlayerSettings * _Nonnull settings;
/// The current media format.
@property (nonatomic, readonly) enum MediaFormat mediaFormat;
/// The player’s session id. the <code>sessionId</code> is initialized when the player loads.
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
/// Add Observation to relevant event.
- (void)addObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
/// Add Observation to relevant events.
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
/// Remove Observer for single event.
- (void)removeObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event;
/// Remove Observer for several events.
- (void)removeObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events;
/// Update Plugin Config.
- (void)updatePluginConfigWithPluginName:(NSString * _Nonnull)pluginName config:(id _Nonnull)config;
/// Updates the styling from the settings textTrackStyling object
- (void)updateTextTrackStyling;
/// Indicates if current media is Live.
///
/// returns:
/// returns true if it’s live.
- (BOOL)isLive SWIFT_WARN_UNUSED_RESULT;
/// Getter for playkit controllers.
/// \param type Required class type.
///
///
/// returns:
/// Relevant controller if exist.
- (id <PKController> _Nullable)getControllerWithType:(Class <PKController> _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// \param interval time interval for the periodic invocation.
///
/// \param dispatchQueue dispatch queue to observe changes on (nil value will use main).
///
/// \param block block to handle the observation.
///
///
/// returns:
/// A uuid token to represent the observation, used to later remove a single observation.
- (NSUUID * _Nonnull)addPeriodicObserverWithInterval:(NSTimeInterval)interval observeOn:(dispatch_queue_t _Nullable)dispatchQueue using:(void (^ _Nonnull)(NSTimeInterval))block SWIFT_WARN_UNUSED_RESULT;
/// Adds a boundary time observer for the selected boundaries in time (25%, 50%, 30s etc.)
/// attention:
/// if a boundary is crossed while seeking the observation <em>won’t be triggered</em>.
/// \param boundaries boundary objects.
///
/// \param dispatchQueue dispatch queue to observe changes on (nil value will use main).
///
/// \param block block to handle the observation with the observed boundary, block returns (time, boundary percentage).
///
///
/// returns:
/// A uuid token to represent the observation, used to later remove a single observation.
- (NSUUID * _Nonnull)addBoundaryObserverWithBoundaries:(NSArray<id <PKBoundary>> * _Nonnull)boundaries observeOn:(dispatch_queue_t _Nullable)dispatchQueue using:(void (^ _Nonnull)(NSTimeInterval, double))block SWIFT_WARN_UNUSED_RESULT;
/// removes a single periodic observer using the uuid provided when added the observation.
- (void)removePeriodicObserver:(NSUUID * _Nonnull)token;
/// removes a single boundary observer using the uuid provided when added the observation.
- (void)removeBoundaryObserver:(NSUUID * _Nonnull)token;
@end


SWIFT_CLASS("_TtC7PlayKit19PlayerDecoratorBase")
@interface PlayerDecoratorBase : NSObject <Player>
@property (nonatomic, readonly, weak) PKMediaEntry * _Nullable mediaEntry;
@property (nonatomic, readonly, strong) PKPlayerSettings * _Nonnull settings;
@property (nonatomic, readonly) enum MediaFormat mediaFormat;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
- (void)addObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
- (void)removeObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event;
- (void)removeObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events;
- (void)updatePluginConfigWithPluginName:(NSString * _Nonnull)pluginName config:(id _Nonnull)config;
- (void)updateTextTrackStyling;
- (BOOL)isLive SWIFT_WARN_UNUSED_RESULT;
- (id <PKController> _Nullable)getControllerWithType:(Class <PKController> _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
- (NSUUID * _Nonnull)addPeriodicObserverWithInterval:(NSTimeInterval)interval observeOn:(dispatch_queue_t _Nullable)dispatchQueue using:(void (^ _Nonnull)(NSTimeInterval))block SWIFT_WARN_UNUSED_RESULT;
- (NSUUID * _Nonnull)addBoundaryObserverWithBoundaries:(NSArray<id <PKBoundary>> * _Nonnull)boundaries observeOn:(dispatch_queue_t _Nullable)dispatchQueue using:(void (^ _Nonnull)(NSTimeInterval, double))block SWIFT_WARN_UNUSED_RESULT;
- (void)removePeriodicObserver:(NSUUID * _Nonnull)token;
- (void)removeBoundaryObserver:(NSUUID * _Nonnull)token;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) enum PlayerState currentState;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic, weak) PlayerView * _Nullable view;
@property (nonatomic) NSTimeInterval currentTime;
@property (nonatomic, readonly, copy) NSDate * _Nullable currentProgramTime;
@property (nonatomic, readonly, copy) NSString * _Nullable currentAudioTrack;
@property (nonatomic, readonly, copy) NSString * _Nullable currentTextTrack;
@property (nonatomic) float rate;
@property (nonatomic) float volume;
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable loadedTimeRanges;
- (void)play;
- (void)pause;
- (void)resume;
- (void)stop;
- (void)replay;
- (void)seekTo:(NSTimeInterval)time;
- (void)selectTrackWithTrackId:(NSString * _Nonnull)trackId;
- (void)destroy;
- (void)prepare:(MediaConfig * _Nonnull)config;
- (void)startBuffering;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit26AdsEnabledPlayerController")
@interface AdsEnabledPlayerController : PlayerDecoratorBase
@property (nonatomic, readonly) BOOL isPlaying;
- (void)prepare:(MediaConfig * _Nonnull)config;
- (void)play;
- (void)resume;
- (void)pause;
- (void)stop;
- (void)destroy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC7PlayKit22AdsPlayerEngineWrapper")
@interface AdsPlayerEngineWrapper : PlayerEngineWrapper
@property (nonatomic, readonly) BOOL isPlaying;
- (void)prepare:(MediaConfig * _Nonnull)config;
- (void)play;
- (void)playFromLiveEdge;
- (void)resume;
- (void)pause;
- (void)stop;
- (void)destroy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC7PlayKit15AnalyticsConfig")
@interface AnalyticsConfig : NSObject
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull params;
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MessageBus;

/// The <code>PKPlugin</code> protocol defines all the properties and methods required to define a plugin object.
SWIFT_PROTOCOL("_TtP7PlayKit8PKPlugin_")
@protocol PKPlugin
/// The plugin name.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pluginName;)
+ (NSString * _Nonnull)pluginName SWIFT_WARN_UNUSED_RESULT;
/// The plugin version. The default (implemented in BasePlugin) is the plugin’s bundle <code>CFBundleShortVersionString</code>:
/// <code>Bundle(for: pluginClass).object(forInfoDictionaryKey: "CFBundleShortVersionString")</code>
/// Override this function to provide a version from a different source.
/// Example for overriding:
/// \code
///     @objc override public class var pluginVersion: String {
///         return "1.2.3"
///     }
///
/// \endcodeIf <code>CFBundleShortVersionString</code> wasn’t found (or is not a string), and no alternative implementation is
/// provided, the string “?.?.?” is used.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pluginVersion;)
+ (NSString * _Nonnull)pluginVersion SWIFT_WARN_UNUSED_RESULT;
/// The player associated with the plugin
@property (nonatomic, readonly, weak) id <Player> _Nullable player;
/// The messageBus associated with the plugin
@property (nonatomic, readonly, weak) MessageBus * _Nullable messageBus;
/// On first load. used for doing initialization for the first time with the media config.
- (nullable instancetype)initWithPlayer:(id <Player> _Nonnull)player pluginConfig:(id _Nullable)pluginConfig messageBus:(MessageBus * _Nonnull)messageBus error:(NSError * _Nullable * _Nullable)error;
/// On update media. used to update the plugin with new media config when available.
- (void)onUpdateMediaWithMediaConfig:(MediaConfig * _Nonnull)mediaConfig;
/// On update config. used to update the plugin config.
- (void)onUpdateConfigWithPluginConfig:(id _Nonnull)pluginConfig;
/// Called on player destroy.
- (void)destroy;
@end

@class PlayerEvent;

SWIFT_PROTOCOL("_TtP7PlayKit23AnalyticsPluginProtocol_")
@protocol AnalyticsPluginProtocol <PKPlugin>
/// Indicates if it first play.
@property (nonatomic) BOOL isFirstPlay;
/// List of events should be handled on plugin.
@property (nonatomic, readonly, copy) NSArray<SWIFT_METATYPE(PlayerEvent)> * _Nonnull playerEventsToRegister;
/// Event registrasion based on playerEventsToRegister array.
- (void)registerEvents;
/// unregister all registered events.
- (void)unregisterEvents;
@end

@class AVURLAsset;

SWIFT_PROTOCOL("_TtP7PlayKit12AssetHandler_")
@protocol AssetHandler
- (nonnull instancetype)init;
- (void)buildFrom:(PKMediaSource * _Nonnull)mediaSource readyCallback:(void (^ _Nonnull)(NSError * _Nullable, AVURLAsset * _Nullable))readyCallback;
@end


/// class <code>BasePlugin</code> is a base plugin object used for plugin subclasses
SWIFT_CLASS("_TtC7PlayKit10BasePlugin")
@interface BasePlugin : NSObject <PKPlugin>
/// abstract implementation subclasses will have names
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pluginName;)
+ (NSString * _Nonnull)pluginName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pluginVersion;)
+ (NSString * _Nonnull)pluginVersion SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <Player> _Nullable player;
@property (nonatomic, weak) MessageBus * _Nullable messageBus;
- (nullable instancetype)initWithPlayer:(id <Player> _Nonnull)player pluginConfig:(id _Nullable)pluginConfig messageBus:(MessageBus * _Nonnull)messageBus error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (void)onUpdateMediaWithMediaConfig:(MediaConfig * _Nonnull)mediaConfig;
- (void)onUpdateConfigWithPluginConfig:(id _Nonnull)pluginConfig;
- (void)destroy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit19BaseAnalyticsPlugin")
@interface BaseAnalyticsPlugin : BasePlugin <AnalyticsPluginProtocol>
/// indicates whether we played for the first time or not.
@property (nonatomic) BOOL isFirstPlay;
/// <hr/>
- (nullable instancetype)initWithPlayer:(id <Player> _Nonnull)player pluginConfig:(id _Nullable)pluginConfig messageBus:(MessageBus * _Nonnull)messageBus error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (void)onUpdateMediaWithMediaConfig:(MediaConfig * _Nonnull)mediaConfig;
- (void)onUpdateConfigWithPluginConfig:(id _Nonnull)pluginConfig;
- (void)destroy;
@property (nonatomic, readonly, copy) NSArray<SWIFT_METATYPE(PlayerEvent)> * _Nonnull playerEventsToRegister;
- (void)registerEvents;
- (void)unregisterEvents;
@end




SWIFT_CLASS("_TtC7PlayKit8CuePoint")
@interface CuePoint : NSObject
@property (nonatomic, readonly) NSTimeInterval startTime;
@property (nonatomic, readonly) NSTimeInterval endTime;
@property (nonatomic, readonly) BOOL played;
- (nonnull instancetype)initWithStartTime:(NSTimeInterval)startTime endTime:(NSTimeInterval)endTime played:(BOOL)played OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit9DRMParams")
@interface DRMParams : NSObject
+ (DRMParams * _Nullable)fromJSON:(id _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, Scheme, closed) {
  SchemeWidevineCenc = 0,
  SchemePlayreadyCenc = 1,
  SchemeWidevineClassic = 2,
  SchemeFairplay = 3,
  SchemeUnknown = 4,
};


SWIFT_PROTOCOL("_TtP7PlayKit14LocalDataStore_")
@protocol LocalDataStore
- (BOOL)saveWithKey:(NSString * _Nonnull)key value:(NSData * _Nonnull)value error:(NSError * _Nullable * _Nullable)error;
- (NSData * _Nullable)loadWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
- (BOOL)existsWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


/// Implementation of LocalDataStore that saves data to files in the Library directory.
SWIFT_CLASS("_TtC7PlayKit21DefaultLocalDataStore")
@interface DefaultLocalDataStore : NSObject <LocalDataStore>
+ (DefaultLocalDataStore * _Nullable)defaultDataStore SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithDirectory:(NSSearchPathDirectory)directory error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)saveWithKey:(NSString * _Nonnull)key value:(NSData * _Nonnull)value error:(NSError * _Nullable * _Nullable)error;
- (NSData * _Nullable)loadWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)existsWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
@end


SWIFT_CLASS("_TtC7PlayKit17FPSExpirationInfo")
@interface FPSExpirationInfo : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nonnull expirationDate;
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit17FairPlayDRMParams")
@interface FairPlayDRMParams : DRMParams
@property (nonatomic, copy) NSData * _Nullable fpsCertificate;
- (nonnull instancetype)initWithLicenseUri:(NSString * _Nonnull)licenseUri scheme:(enum Scheme)scheme base64EncodedCertificate:(NSString * _Nonnull)base64EncodedCertificate OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use init(licenseUri:base64EncodedCertificate:) instead");
- (nonnull instancetype)initWithLicenseUri:(NSString * _Nonnull)licenseUri base64EncodedCertificate:(NSString * _Nonnull)base64EncodedCertificate OBJC_DESIGNATED_INITIALIZER;
@end

@class PKRequestParams;

SWIFT_PROTOCOL("_TtP7PlayKit23FairPlayLicenseProvider_")
@protocol FairPlayLicenseProvider
- (void)getLicenseWithSpc:(NSData * _Nonnull)spc assetId:(NSString * _Nonnull)assetId requestParams:(PKRequestParams * _Nonnull)requestParams callback:(void (^ _Nonnull)(NSData * _Nullable, NSTimeInterval, NSError * _Nullable))callback;
@end


/// <code>PKRequestParamsDecorator</code> used for getting updated request info
SWIFT_PROTOCOL("_TtP7PlayKit22PKRequestParamsAdapter_")
@protocol PKRequestParamsAdapter
/// Called when need to update the request adapter with information from the player.
/// Use this to update the adapter with any information available from the player.
/// For example, when media session id changes.
- (void)updateRequestAdapterWith:(id <Player> _Nonnull)player;
- (PKRequestParams * _Nonnull)adaptWithRequestParams:(PKRequestParams * _Nonnull)requestParams SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7PlayKit29KalturaPlaybackRequestAdapter")
@interface KalturaPlaybackRequestAdapter : NSObject <PKRequestParamsAdapter>
/// Installs a new kaltura request adapter on the provided player with custom application name.
/// \param player The player you want to use with the request adapter
///
/// \param appName the application name, if <code>nil</code> will use the bundle identifier.
///
+ (void)installIn:(id <Player> _Nonnull)player withAppName:(NSString * _Nonnull)appName;
/// Updates the request adapter with info from the player
- (void)updateRequestAdapterWith:(id <Player> _Nonnull)player;
/// Adapts the request params
- (PKRequestParams * _Nonnull)adaptWithRequestParams:(PKRequestParams * _Nonnull)requestParams SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit32KalturaUDRMLicenseRequestAdapter")
@interface KalturaUDRMLicenseRequestAdapter : NSObject <PKRequestParamsAdapter>
/// Installs a new kaltura request adapter on the provided player with custom application name.
/// \param player The player you want to use with the request adapter
///
/// \param appName the application name, if <code>nil</code> will use the bundle identifier.
///
+ (void)installIn:(id <Player> _Nonnull)player withAppName:(NSString * _Nonnull)appName;
/// Updates the request adapter with info from the player
- (void)updateRequestAdapterWith:(id <Player> _Nonnull)player;
/// Adapts the request params
- (PKRequestParams * _Nonnull)adaptWithRequestParams:(PKRequestParams * _Nonnull)requestParams SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A <code>MediaConfig</code> object defines behavior and info to use when preparing a <code>Player</code> object.
SWIFT_CLASS("_TtC7PlayKit11MediaConfig")
@interface MediaConfig : NSObject
@property (nonatomic, strong) PKMediaEntry * _Nonnull mediaEntry;
@property (nonatomic) NSTimeInterval startTime;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithMediaEntry:(PKMediaEntry * _Nonnull)mediaEntry OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMediaEntry:(PKMediaEntry * _Nonnull)mediaEntry startTime:(NSTimeInterval)startTime OBJC_DESIGNATED_INITIALIZER;
+ (MediaConfig * _Nonnull)configWithMediaEntry:(PKMediaEntry * _Nonnull)mediaEntry SWIFT_WARN_UNUSED_RESULT;
+ (MediaConfig * _Nonnull)configWithMediaEntry:(PKMediaEntry * _Nonnull)mediaEntry startTime:(NSTimeInterval)startTime SWIFT_WARN_UNUSED_RESULT;
/// Private init.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MediaConfig (SWIFT_EXTENSION(PlayKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP7PlayKit18MediaEntryProvider_")
@protocol MediaEntryProvider
/// This method is triggering the creation of media base on custom parameters and actions.
/// <h2>Important:</h2>
/// <ul>
///   <li>
///     In order to write custom provider you should implement this method
///   </li>
///   <li>
///     In order to send an informative error in the ResponseElement
///     you should implement an error enum with the relevnat errors
///   </li>
/// </ul>
/// \code
///    // example of usage:
///     let cp : MediaEntryProvider =
///        CustomMediaEntryProvider(customParameters)
///
///     customMediaProvider.loadMedia { 
///        (r:ResponseElement<PKMediaEntry>) in
///         if (r.succedded){
///         ...
///
/// \endcode\param callback - a block that called on completion and returing response object wich contain the PKMediaEntry 
///
- (void)loadMediaWithCallback:(void (^ _Nonnull)(PKMediaEntry * _Nullable, NSError * _Nullable))callback;
- (void)cancel;
@end

typedef SWIFT_ENUM(NSInteger, MediaType, closed) {
  MediaTypeDvrLive = 0,
  MediaTypeLive = 1,
  MediaTypeVod = 2,
  MediaTypeUnknown = 3,
};


/// <code>MessageBus</code> object handles all event message observing and posting
SWIFT_CLASS("_TtC7PlayKit10MessageBus")
@interface MessageBus : NSObject
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events observeOn:(dispatch_queue_t _Nonnull)dispatchQueue block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
- (void)removeObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events;
- (void)post:(PKEvent * _Nonnull)event;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit22MockMediaEntryProvider")
@interface MockMediaEntryProvider : NSObject <MediaEntryProvider>
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic) id _Nullable content;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)loadMediaWithCallback:(void (^ _Nonnull)(PKMediaEntry * _Nullable, NSError * _Nullable))callback;
- (void)cancel;
@end


SWIFT_CLASS("_TtC7PlayKit13PKAdCuePoints")
@interface PKAdCuePoints : NSObject
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull cuePoints;
- (nonnull instancetype)initWithCuePoints:(NSArray<NSNumber *> * _Nonnull)cuePoints OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSInteger count;
@property (nonatomic, readonly) BOOL hasPreRoll;
@property (nonatomic, readonly) BOOL hasMidRoll;
@property (nonatomic, readonly) BOOL hasPostRoll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit16PKAdDAICuePoints")
@interface PKAdDAICuePoints : NSObject
@property (nonatomic, readonly, copy) NSArray<CuePoint *> * _Nonnull cuePoints;
- (nonnull instancetype)init:(NSArray<CuePoint *> * _Nonnull)cuePoints OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL hasPreRoll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>PKAdInfo</code> represents ad information.
SWIFT_CLASS("_TtC7PlayKit8PKAdInfo")
@interface PKAdInfo : NSObject
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic, copy) NSString * _Nonnull title;
/// The position of the pod in the content in seconds. Pre-roll returns 0,
/// post-roll returns -1 and mid-rolls return the scheduled time of the pod.
@property (nonatomic) NSTimeInterval timeOffset;
@property (nonatomic, copy) NSString * _Nonnull adDescription;
@property (nonatomic) BOOL isSkippable;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@property (nonatomic, copy) NSString * _Nonnull adId;
/// The source ad server information included in the ad response.
@property (nonatomic, copy) NSString * _Nonnull adSystem;
@property (nonatomic) NSInteger height;
@property (nonatomic) NSInteger width;
/// Total number of ads in the pod this ad belongs to. Will be 1 for standalone ads.
@property (nonatomic) NSInteger totalAds;
/// The position of this ad within an ad pod. Will be 1 for standalone ads.
@property (nonatomic) NSInteger adPosition;
@property (nonatomic) BOOL isBumper;
@property (nonatomic) NSInteger podIndex;
@property (nonatomic) NSInteger mediaBitrate;
@property (nonatomic, copy) NSString * _Nonnull creativeId;
@property (nonatomic, copy) NSString * _Nonnull advertiserName;
/// returns the position type of the ad (pre, mid, post)
@property (nonatomic, readonly) enum AdPositionType positionType;
- (nonnull instancetype)initWithAdDescription:(NSString * _Nonnull)adDescription adDuration:(NSTimeInterval)adDuration title:(NSString * _Nonnull)title isSkippable:(BOOL)isSkippable contentType:(NSString * _Nonnull)contentType adId:(NSString * _Nonnull)adId adSystem:(NSString * _Nonnull)adSystem height:(NSInteger)height width:(NSInteger)width totalAds:(NSInteger)totalAds adPosition:(NSInteger)adPosition timeOffset:(NSTimeInterval)timeOffset isBumper:(BOOL)isBumper podIndex:(NSInteger)podIndex mediaBitrate:(NSInteger)mediaBitrate creativeId:(NSString * _Nonnull)creativeId advertiserName:(NSString * _Nonnull)advertiserName OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>PKBoundary</code> used as abstract for boundary types (% and time).
SWIFT_PROTOCOL("_TtP7PlayKit10PKBoundary_")
@protocol PKBoundary
@property (nonatomic, readonly) NSTimeInterval time;
@end

@class PKPercentageTimeBoundary;
@class PKTimeBoundary;

/// <code>PKBoundaryFactory</code> factory class used to create boundary objects easily.
SWIFT_CLASS("_TtC7PlayKit17PKBoundaryFactory")
@interface PKBoundaryFactory : NSObject
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (PKPercentageTimeBoundary * _Nonnull)percentageTimeBoundaryWithBoundary:(NSInteger)boundary SWIFT_WARN_UNUSED_RESULT;
- (PKTimeBoundary * _Nonnull)timeBoundaryWithBoundaryTime:(NSTimeInterval)boundaryTime SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7PlayKit12PKController_")
@protocol PKController
- (nonnull instancetype)initWithPlayer:(id <PlayerEngine> _Nullable)player;
@end


/// <hr/>
SWIFT_CLASS("_TtC7PlayKit11PKErrorCode")
@interface PKErrorCode : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FailedToLoadAssetFromKeys;)
+ (NSInteger)FailedToLoadAssetFromKeys SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger AssetNotPlayable;)
+ (NSInteger)AssetNotPlayable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PlayerItemFailed;)
+ (NSInteger)PlayerItemFailed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PlayerFailed;)
+ (NSInteger)PlayerFailed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MissingDependency;)
+ (NSInteger)MissingDependency SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PlayerItemErrorLogEvent;)
+ (NSInteger)PlayerItemErrorLogEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FailedToCreatePlugin;)
+ (NSInteger)FailedToCreatePlugin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MissingPluginConfig;)
+ (NSInteger)MissingPluginConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <hr/>
SWIFT_CLASS("_TtC7PlayKit13PKErrorDomain")
@interface PKErrorDomain : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Plugin;)
+ (NSString * _Nonnull)Plugin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Player;)
+ (NSString * _Nonnull)Player SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSNumber;
@class NSError;

@interface PKEvent (SWIFT_EXTENSION(PlayKit))
/// MediaTime, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable adMediaTime;
/// TotalTime, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable adTotalTime;
/// WebOpener, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) NSObject * _Nullable adWebOpener;
/// Associated error from error event, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) NSError * _Nullable adError;
/// Ad cue points, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) PKAdCuePoints * _Nullable adCuePoints;
/// Ad DAI cue points, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) PKAdDAICuePoints * _Nullable adDAICuePoints;
/// TotalTime, PKEvent Ad Data Accessor
@property (nonatomic, readonly, copy) NSString * _Nullable adTagUrl;
/// Ad info, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) PKAdInfo * _Nullable adInfo;
@end

@class PKTracks;
@class Track;
@class PKPlaybackInfo;
@class AVMetadataItem;

@interface PKEvent (SWIFT_EXTENSION(PlayKit))
/// Duration Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable duration;
/// Current Time Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable currentTime;
/// Duration Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable targetSeekPosition;
/// Tracks Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) PKTracks * _Nullable tracks;
/// Selected Track Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) Track * _Nullable selectedTrack;
/// Indicated Bitrate, PKEvent Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable bitrate;
/// Current Bitrate Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) PKPlaybackInfo * _Nullable playbackInfo;
/// Current Old State Value, PKEvent Data Accessor
@property (nonatomic, readonly) enum PlayerState oldState;
/// Current New State Value, PKEvent Data Accessor
@property (nonatomic, readonly) enum PlayerState newState;
/// Associated error from error event, PKEvent Data Accessor
@property (nonatomic, readonly, strong) NSError * _Nullable error;
/// Associated metadata from the event, PKEvent Data Accessor
@property (nonatomic, readonly, copy) NSArray<AVMetadataItem *> * _Nullable timedMetadata;
/// Content url, PKEvent Data Accessor
@property (nonatomic, readonly, strong) PKMediaSource * _Nullable mediaSource;
/// Content url, PKEvent Data Accessor
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable timeRanges;
@end


SWIFT_CLASS("_TtC7PlayKit18PKExternalSubtitle")
@interface PKExternalSubtitle : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
@property (nonatomic, readonly, copy) NSString * _Nonnull vttURLString;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) BOOL isDefault;
@property (nonatomic, readonly) BOOL autoSelect;
@property (nonatomic, readonly) BOOL forced;
@property (nonatomic, readonly, copy) NSString * _Nonnull characteristics;
/// Initializes a new PKExternalSubtitle which enables the configuration of external subtitles.
/// \param id The value is used in order to identify the specific subtitle from the others.
///
/// \param name The value is a quoted-string containing a human-readable description of the Rendition.
///
/// \param language The value is a one of the standard Tags for Identifying Languages [RFC5646], which identifies the primary language used in the Rendition.
///
/// \param vttURLString This is the string URL of the vtt.
///
/// \param duration This is the media’s duration.
///
/// \param isDefault If the value is true, then the client SHOULD play this Rendition of the content in the absence of information from the user indicating a different choice. This attribute is OPTIONAL. It’s absence indicates an implicit value of false.
///
/// \param autoSelect If the value is true, then the client MAY choose to play this Rendition in the absence of explicit user preference because it matches the current playback environment, such as chosen system language. This attribute is OPTIONAL.  Its absence indicates an implicit value of false.
///
/// \param forced A value of true indicates that the Rendition contains content that is considered essential to play. When selecting a FORCED Rendition, a client SHOULD choose the one that best matches the current playback environment (e.g., language). This attribute is OPTIONAL. It’s absence indicates an implicit value of false.
///
/// \param characteristics The value contains one or more Uniform Type Identifiers [UTI] separated by comma (,) characters. This attribute is OPTIONAL. Each UTI indicates an individual characteristic of the Rendition.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name language:(NSString * _Nonnull)language vttURLString:(NSString * _Nonnull)vttURLString duration:(double)duration isDefault:(BOOL)isDefault autoSelect:(BOOL)autoSelect forced:(BOOL)forced characteristics:(NSString * _Nullable)characteristics OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>PKLogLevel</code> describes the available log levels.
typedef SWIFT_ENUM(NSInteger, PKLogLevel, closed) {
  PKLogLevelVerbose = 0,
  PKLogLevelDebug = 1,
  PKLogLevelInfo = 2,
  PKLogLevelWarning = 3,
  PKLogLevelError = 4,
};


SWIFT_CLASS("_TtC7PlayKit12PKMediaEntry")
@interface PKMediaEntry : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSArray<PKMediaSource *> * _Nullable sources;
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic) enum MediaType mediaType;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSArray<PKExternalSubtitle *> * _Nullable externalSubtitles;
- (nonnull instancetype)init:(NSString * _Nonnull)id sources:(NSArray<PKMediaSource *> * _Nonnull)sources duration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithJson:(id _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit13PKMediaSource")
@interface PKMediaSource : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSURL * _Nullable contentUrl;
@property (nonatomic, copy) NSString * _Nullable mimeType;
@property (nonatomic, copy) NSArray<DRMParams *> * _Nullable drmData;
@property (nonatomic) enum MediaFormat mediaFormat;
@property (nonatomic, copy) NSArray<PKExternalSubtitle *> * _Nullable externalSubtitle;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
- (nonnull instancetype)init:(NSString * _Nonnull)id contentUrl:(NSURL * _Nullable)contentUrl mimeType:(NSString * _Nullable)mimeType drmData:(NSArray<DRMParams *> * _Nullable)drmData mediaFormat:(enum MediaFormat)mediaFormat OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithJson:(id _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MediaFormat, closed) {
  MediaFormatHls = 0,
  MediaFormatWvm = 1,
  MediaFormatMp4 = 2,
  MediaFormatMp3 = 3,
  MediaFormatUnknown = 4,
};



SWIFT_CLASS("_TtC7PlayKit17PKNetworkSettings")
@interface PKNetworkSettings : NSObject
/// Indicates the desired limit of network bandwidth consumption for this item.
/// Set preferredPeakBitRate to non-zero to indicate that the player should attempt to limit item playback to that bit rate, expressed in bits per second.
/// If network bandwidth consumption cannot be lowered to meet the preferredPeakBitRate, it will be reduced as much as possible while continuing to play the item.
/// @available(iOS 8.0, *) via AVPlayerItem
@property (nonatomic) double preferredPeakBitRate;
/// Indicates the media duration the caller prefers the player to buffer from the network ahead of the playhead to guard against playback disruption.
/// The value is in seconds. If it is set to 0, the player will choose an appropriate level of buffering for most use cases.
/// Note that setting this property to a low value will increase the chance that playback will stall and re-buffer, while setting it to a high value will increase demand on system resources.
/// Note that the system may buffer less than the value of this property in order to manage resource consumption.
/// @available(iOS 10.0, *) via AVPlayerItem
@property (nonatomic) double preferredForwardBufferDuration;
/// Indicates that the player is allowed to delay playback at the specified rate in order to minimize stalling
/// For further details please see Apple’s documentation: https://developer.apple.com/documentation/avfoundation/avplayer/1643482-automaticallywaitstominimizestal
/// @available(iOS 10.0, tvOS 10.0, *) via AVPlayer
@property (nonatomic) BOOL automaticallyWaitsToMinimizeStalling;
/// Tells the player whether or not to buffer the media, or stop after initializing the asset and fetching the keys.
/// Default value is true, initialize the asset, fetch the keys and buffer the media.
/// If the value is set to false, the player will stop after initializing the asset and fetching the keys. A manual call to player startBuffering is needed.
/// This comes in handy when you would like to divide between the views and initialize the media before the user interacts with the player to show it, start buffering and playing.
/// In another case if you would like to start initializing the next media without buffering it, so that once the media is switched to the next one, it will be smother.
@property (nonatomic) BOOL autoBuffer;
- (PKNetworkSettings * _Nonnull)createCopy SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>PKPercentageTimeBoundary</code> represents a time boundary in % against the media duration.
SWIFT_CLASS("_TtC7PlayKit24PKPercentageTimeBoundary")
@interface PKPercentageTimeBoundary : NSObject <PKBoundary>
/// The time to set the boundary on.
@property (nonatomic, readonly) NSTimeInterval time;
/// Creates a new <code>PKPercentageTimeBoundary</code> object from %.
/// attention:
/// boundary value should be between 1 and 100 otherwise will use default values!
- (nonnull instancetype)initWithBoundary:(NSInteger)boundary duration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>PKPlaybackInfo</code> represents a playback info object.
SWIFT_CLASS("_TtC7PlayKit14PKPlaybackInfo")
@interface PKPlaybackInfo : NSObject
/// The actual bitrate of the playback.
@property (nonatomic, readonly) double bitrate;
/// The selected track indicated bitrate.
@property (nonatomic, readonly) double indicatedBitrate;
/// The throughput of the playback (download speed)
@property (nonatomic, readonly) double observedBitrate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PKTrackSelectionSettings;

SWIFT_CLASS("_TtC7PlayKit16PKPlayerSettings")
@interface PKPlayerSettings : NSObject
@property (nonatomic) BOOL cea608CaptionsEnabled;
/// The settings for network data consumption.
@property (nonatomic, strong) PKNetworkSettings * _Nonnull network;
@property (nonatomic, strong) PKTrackSelectionSettings * _Nonnull trackSelection;
@property (nonatomic, strong) PKTextTrackStyling * _Nonnull textTrackStyling;
@property (nonatomic, strong) id <PKRequestParamsAdapter> _Nullable contentRequestAdapter;
@property (nonatomic, strong) id <PKRequestParamsAdapter> _Nullable licenseRequestAdapter;
@property (nonatomic, strong) id <FairPlayLicenseProvider> _Nullable fairPlayLicenseProvider;
@property (nonatomic) BOOL allowFairPlayOnExternalScreens;
/// If this value is set to true, playImmediatelyAtRate will be called.
/// When the player’s currentItem has a value of NO for playbackBufferEmpty, this method causes the value of rate to change to the specified rate, the value of timeControlStatus to change to AVPlayerTimeControlStatusPlaying, and the receiver to play the available media immediately, whether or not prior buffering of media data is sufficient to ensure smooth playback.
/// If insufficient media data is buffered for playback to start (e.g. if the current item has a value of YES for playbackBufferEmpty), the receiver will act as if the buffer became empty during playback, except that no AVPlayerItemPlaybackStalledNotification will be posted.
/// @available(iOS 10.0, tvOS 10.0, *)
@property (nonatomic) BOOL shouldPlayImmediately;
- (PKPlayerSettings * _Nonnull)createCopy SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PKPlayerSettings (SWIFT_EXTENSION(PlayKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP7PlayKit14PKPluginWarmUp_")
@protocol PKPluginWarmUp
+ (void)warmUp;
@end


SWIFT_CLASS("_TtC7PlayKit15PKRequestParams")
@interface PKRequestParams : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable headers;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url headers:(NSDictionary<NSString *, NSString *> * _Nullable)headers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, PKTextMarkupCharacterEdgeStyle, closed) {
  PKTextMarkupCharacterEdgeStyleNone = 0,
  PKTextMarkupCharacterEdgeStyleRaised = 1,
  PKTextMarkupCharacterEdgeStyleDepressed = 2,
  PKTextMarkupCharacterEdgeStyleUniform = 3,
  PKTextMarkupCharacterEdgeStyleDropShadow = 4,
};

@class UIColor;

SWIFT_CLASS("_TtC7PlayKit18PKTextTrackStyling")
@interface PKTextTrackStyling : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (PKTextTrackStyling * _Nonnull)setTextColor:(UIColor * _Nonnull)color;
- (PKTextTrackStyling * _Nonnull)setBackgroundColor:(UIColor * _Nonnull)color;
- (PKTextTrackStyling * _Nonnull)setTextSizeWithPercentageOfVideoHeight:(NSInteger)percentageOfVideoHeight;
- (PKTextTrackStyling * _Nonnull)setEdgeStyle:(enum PKTextMarkupCharacterEdgeStyle)style;
- (PKTextTrackStyling * _Nonnull)setEdgeColor:(UIColor * _Nonnull)color;
- (PKTextTrackStyling * _Nonnull)setFontFamily:(NSString * _Nonnull)family;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>PKTimeBoundary</code> represents a time boundary in seconds.
SWIFT_CLASS("_TtC7PlayKit14PKTimeBoundary")
@interface PKTimeBoundary : NSObject <PKBoundary>
/// The time to set the boundary on.
@property (nonatomic, readonly) NSTimeInterval time;
/// Creates a new <code>PKTimeBoundary</code> object from seconds.
/// attention:
/// boundary value should be between 0 and duration otherwise will use default values!
- (nonnull instancetype)initWithBoundaryTime:(NSTimeInterval)boundaryTime duration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit11PKTimeRange")
@interface PKTimeRange : NSObject
@property (nonatomic, readonly) NSTimeInterval start;
@property (nonatomic, readonly) NSTimeInterval end;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TrackSelectionMode : NSInteger;

SWIFT_CLASS("_TtC7PlayKit24PKTrackSelectionSettings")
@interface PKTrackSelectionSettings : NSObject
@property (nonatomic) enum TrackSelectionMode textSelectionMode;
@property (nonatomic, copy) NSString * _Nullable textSelectionLanguage;
@property (nonatomic) enum TrackSelectionMode audioSelectionMode;
@property (nonatomic, copy) NSString * _Nullable audioSelectionLanguage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit8PKTracks")
@interface PKTracks : NSObject
@property (nonatomic, copy) NSArray<Track *> * _Nullable audioTracks;
@property (nonatomic, copy) NSArray<Track *> * _Nullable textTracks;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ViewState : NSInteger;
@class UIView;

SWIFT_CLASS("_TtC7PlayKit14PKVRController")
@interface PKVRController : NSObject <PKController>
/// Represents current PKVRController view state
/// ViewState Options
/// <ul>
///   <li>
///     panorama
///   </li>
///   <li>
///     stereo
///   </li>
///   <li>
///     error
///   </li>
///   <li>
///     unknown
///   </li>
/// </ul>
@property (nonatomic, readonly) enum ViewState currentViewState;
/// <hr/>
- (nonnull instancetype)initWithPlayer:(id <PlayerEngine> _Nullable)player OBJC_DESIGNATED_INITIALIZER;
/// \param isVREnabled Toggle to enable vr mode.
///
- (void)setVRModeEnabled:(BOOL)isVREnabled;
/// Requests reset of rotation in the next rendering frame.
- (void)centerViewPoint;
/// Creates eye view indicator.
/// \param frame eye view frame
///
///
/// returns:
/// eye view indicator
- (UIView * _Nullable)createOrientationIndicatorViewWithFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PluginConfig;

/// Manager class used for:
/// <ul>
///   <li>
///     creating <code>Player</code> objects.
///   </li>
///   <li>
///     creating and registering plugins.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC7PlayKit14PlayKitManager")
@interface PlayKitManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionString;)
+ (NSString * _Nonnull)versionString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientTag;)
+ (NSString * _Nonnull)clientTag SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PlayKitManager * _Nonnull sharedInstance;)
+ (PlayKitManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Loads and returns a player object using a provided configuration.
/// important:
/// In order to start buffering the video after loading the player
/// you must call prepare on the player with the same configuration.
/// \code
///     player = PlayKitManager.sharedInstance.loadPlayer(config: config)
///     player.prepare(config)
///
/// \endcode\param pluginConfig The configuration object to load the player with.
///
///
/// returns:
/// A player loaded using the provided configuration.
- (id <Player> _Nonnull)loadPlayerWithPluginConfig:(PluginConfig * _Nullable)pluginConfig SWIFT_WARN_UNUSED_RESULT;
- (void)registerPlugin:(SWIFT_METATYPE(BasePlugin) _Nonnull)pluginClass;
- (NSDictionary<NSString *, NSString *> * _Nonnull)registeredPlugins SWIFT_WARN_UNUSED_RESULT;
/// sets the logging level for our logger.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum PKLogLevel logLevel;)
+ (enum PKLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum PKLogLevel)value;
@end






/// PlayerEvent is a class used to reflect player events.
SWIFT_CLASS("_TtC7PlayKit11PlayerEvent")
@interface PlayerEvent : PKEvent
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SWIFT_METATYPE(PlayerEvent)> * _Nonnull allEventTypes;)
+ (NSArray<SWIFT_METATYPE(PlayerEvent)> * _Nonnull)allEventTypes SWIFT_WARN_UNUSED_RESULT;
/// Sent when enough data is available that the media can be played, at least for a couple of frames.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull canPlay;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)canPlay SWIFT_WARN_UNUSED_RESULT;
/// The metadata has loaded or changed, indicating a change in duration of the media. This is sent, for example, when the media has loaded enough that the duration is known.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull durationChanged;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)durationChanged SWIFT_WARN_UNUSED_RESULT;
/// Sent when playback stopped.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull stopped;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)stopped SWIFT_WARN_UNUSED_RESULT;
/// Sent when playback completes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull ended;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)ended SWIFT_WARN_UNUSED_RESULT;
/// The media’s metadata has finished loading; all attributes now contain as much useful information as they’re going to.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull loadedMetadata;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)loadedMetadata SWIFT_WARN_UNUSED_RESULT;
/// Sent when playback of the media starts after having been paused; that is, when playback is resumed after a prior pause event.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull play;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)play SWIFT_WARN_UNUSED_RESULT;
/// Sent when playback is paused.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull pause;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)pause SWIFT_WARN_UNUSED_RESULT;
/// Sent when the media begins to play (either for the first time, after having been paused, or after ending and then restarting).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull playing;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)playing SWIFT_WARN_UNUSED_RESULT;
/// Sent when a seek operation begins.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull seeking;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)seeking SWIFT_WARN_UNUSED_RESULT;
/// Sent when a seek operation completes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull seeked;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)seeked SWIFT_WARN_UNUSED_RESULT;
/// Sent when a replay operation is performed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull replay;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)replay SWIFT_WARN_UNUSED_RESULT;
/// Sent when tracks available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull tracksAvailable;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)tracksAvailable SWIFT_WARN_UNUSED_RESULT;
/// Sent when text track has been changed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull textTrackChanged;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)textTrackChanged SWIFT_WARN_UNUSED_RESULT;
/// Sent when audio track has been changed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull audioTrackChanged;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)audioTrackChanged SWIFT_WARN_UNUSED_RESULT;
/// Sent when video track has been changed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull videoTrackChanged;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)videoTrackChanged SWIFT_WARN_UNUSED_RESULT;
/// Sent when Playback Params Updated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull playbackInfo;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)playbackInfo SWIFT_WARN_UNUSED_RESULT;
/// Sent when player state is changed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull stateChanged;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)stateChanged SWIFT_WARN_UNUSED_RESULT;
/// Sent when timed metadata is available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull timedMetadata;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)timedMetadata SWIFT_WARN_UNUSED_RESULT;
/// Sent when source was selected.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull sourceSelected;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)sourceSelected SWIFT_WARN_UNUSED_RESULT;
/// Sent when loaded time ranges was changed, loaded time ranges represent the buffered content.
/// Could be used to show amount buffered on the playhead UI.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull loadedTimeRanges;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)loadedTimeRanges SWIFT_WARN_UNUSED_RESULT;
/// Sent when the playhead (current time) has moved.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull playheadUpdate;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)playheadUpdate SWIFT_WARN_UNUSED_RESULT;
/// Sent when an error occurs in the player that the playback can recover from.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull error;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
/// Sent when an error log event received from player (non fatal errors).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull errorLog;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)errorLog SWIFT_WARN_UNUSED_RESULT;
/// Sent when the player has stalled. Buffering with no available data to play.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull playbackStalled;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)playbackStalled SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@end

/// An PlayerState is an enum of different player states
typedef SWIFT_ENUM(NSInteger, PlayerState, closed) {
/// Sent when player’s state idle.
  PlayerStateIdle = 0,
/// Sent when player’s state ready.
  PlayerStateReady = 1,
/// Sent when player’s state buffering.
  PlayerStateBuffering = 2,
/// Sent when player’s state ended.
/// Same event sent when observing PlayerEvent.ended.
/// This state was attached to reflect current state and avoid unrelevant boolean.
  PlayerStateEnded = 3,
/// Sent when player’s state errored.
  PlayerStateError = 4,
/// Sent when player’s state unknown.
  PlayerStateUnknown = -1,
};

@class NSCoder;

/// A simple <code>UIView</code> subclass that is backed by an <code>AVPlayerLayer</code> layer.
SWIFT_CLASS("_TtC7PlayKit10PlayerView")
@interface PlayerView : UIView
@property (nonatomic) UIViewContentMode contentMode;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
/// adds the player view as a subview to the container view and sets up constraints
- (void)addToContainer:(UIView * _Nonnull)container;
/// creates a new <code>PlayerView</code> instance and connects it to the player
/// important:
/// make sure to keep strong reference for the player view instance (either from adding as subview or property),
/// otherwise it will be deallocated as the framework holds a weak reference to it
+ (PlayerView * _Nonnull)createPlayerViewForPlayer:(id <Player> _Nonnull)player SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>PluginConfig</code> object defines config to use when loading a plugin object.
SWIFT_CLASS("_TtC7PlayKit12PluginConfig")
@interface PluginConfig : NSObject
/// Plugins config dictionary holds [plugin name : plugin config]
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull config;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithConfig:(NSDictionary<NSString *, id> * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
/// Private init.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PluginConfig (SWIFT_EXTENSION(PlayKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7PlayKit11PluginEvent")
@interface PluginEvent : PKEvent
/// Sent when a plugin error occurs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PluginEvent) _Nonnull error;)
+ (SWIFT_METATYPE(PluginEvent) _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit5Track")
@interface Track : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nullable language;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TrackSelectionMode, closed) {
  TrackSelectionModeOff = 0,
  TrackSelectionModeAuto = 1,
  TrackSelectionModeSelection = 2,
};


SWIFT_CLASS("_TtC7PlayKit13TracksManager")
@interface TracksManager : NSObject
- (Track * _Nullable)selectTrackWithItem:(AVPlayerItem * _Nonnull)item trackId:(NSString * _Nonnull)trackId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)currentAudioTrackWithItem:(AVPlayerItem * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)currentTextTrackWithItem:(AVPlayerItem * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7PlayKit14VRPlayerEngine_")
@protocol VRPlayerEngine <PlayerEngine>
/// VRPlayerEngine initializer
- (nonnull instancetype)init;
/// Current View State
@property (nonatomic, readonly) enum ViewState currentViewState;
/// Enable VR Mode - Stereo display for Google’s Cardboard.
/// \param isEnabled Toggle to enable vr mode.
///
- (void)setVRModeEnabled:(BOOL)isEnabled;
/// Requests reset of rotation in the next rendering frame.
- (void)centerViewPoint;
/// Creates the orientation indicator view.
/// \param frame The frame of orientation indicator view.
///
- (UIView * _Nullable)createOrientationIndicatorViewWithFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
@end

/// <hr/>
typedef SWIFT_ENUM(NSInteger, ViewState, closed) {
/// Sent when player’s view state panorama.
  ViewStatePanorama = 0,
/// Sent when player’s view state vr.
  ViewStateStereo = 1,
/// Sent when player’s view state errored.
  ViewStateError = 2,
/// Sent when player’s view state unknown.
  ViewStateUnknown = -1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif


#else // merged by cocoapods-binary

// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef PLAYKIT_SWIFT_H
#define PLAYKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PlayKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class AVPlayerItem;

/// An AVPlayerEngine is a controller used to manage the playback and timing of a media asset.
/// It provides the interface to control the player’s behavior such as its ability to play, pause, and seek to various points in the timeline.
SWIFT_CLASS("_TtC7PlayKit14AVPlayerEngine")
@interface AVPlayerEngine : AVPlayer
@property (nonatomic) float rate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)pause;
- (void)play;
- (void)playImmediatelyAtRate:(float)rate SWIFT_AVAILABILITY(tvos,introduced=10.0) SWIFT_AVAILABILITY(ios,introduced=10.0);
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end


@interface AVPlayerEngine (SWIFT_EXTENSION(PlayKit))
- (void)replaceCurrentItemWithPlayerItem:(AVPlayerItem * _Nullable)item;
@end



@interface AVPlayerEngine (SWIFT_EXTENSION(PlayKit))
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

enum PlayerState : NSInteger;
@class PlayerView;
@class PKTimeRange;
@class MediaConfig;

SWIFT_PROTOCOL("_TtP7PlayKit11BasicPlayer_")
@protocol BasicPlayer
/// The player’s duration.
@property (nonatomic, readonly) NSTimeInterval duration;
/// The player’s currentState.
@property (nonatomic, readonly) enum PlayerState currentState;
/// Indicates if the player is playing.
@property (nonatomic, readonly) BOOL isPlaying;
/// The player’s view component.
@property (nonatomic, weak) PlayerView * _Nullable view;
/// The current player’s time.
@property (nonatomic) NSTimeInterval currentTime;
/// The current program time (PROGRAM-DATE-TIME).
@property (nonatomic, readonly, copy) NSDate * _Nullable currentProgramTime;
/// Get the player’s current audio track.
@property (nonatomic, readonly, copy) NSString * _Nullable currentAudioTrack;
/// Get the player’s current text track.
@property (nonatomic, readonly, copy) NSString * _Nullable currentTextTrack;
/// Indicates the desired rate of playback, 0.0 means “paused”, 1.0 indicates a desire to play at the natural rate of the current item.
/// Note: Do not use the rate to indicate whether to play or pause! Use the isPlaying property.
@property (nonatomic) float rate;
/// The audio playback volume for the player, ranging from 0.0 through 1.0 on a linear scale.
@property (nonatomic) float volume;
/// Provides a collection of time ranges for which the player has the media data readily available. The ranges provided might be discontinuous.
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable loadedTimeRanges;
/// Send a play action for the player.
- (void)play;
/// Send a pause action for the player.
- (void)pause;
/// Send a resume action for the player.
- (void)resume;
/// Send a stop action for the player.
- (void)stop;
/// Send a replay action for the player.
- (void)replay;
/// Send a seek action for the player.
- (void)seekTo:(NSTimeInterval)time;
/// Select a Track
- (void)selectTrackWithTrackId:(NSString * _Nonnull)trackId;
/// Release the player’s resources.
- (void)destroy;
/// Prepare for playing an entry.
/// If player network setting autoBuffer is set to true, prepare starts buffering the entry.
/// Otherwise, if autoBuffer is set to false, need to call startBuffering manually.
- (void)prepare:(MediaConfig * _Nonnull)config;
/// Starts buffering the entry.
- (void)startBuffering;
@end

@class PKEvent;
@class PKMediaSource;
@protocol AssetHandler;
@class PKTextTrackStyling;

SWIFT_PROTOCOL("_TtP7PlayKit12PlayerEngine_")
@protocol PlayerEngine <BasicPlayer>
/// Fired when an event is triggred.
@property (nonatomic, copy) void (^ _Nullable onEventBlock)(PKEvent * _Nonnull);
/// The player’s start position.
@property (nonatomic) NSTimeInterval startPosition;
/// The player’s current position.
@property (nonatomic) NSTimeInterval currentPosition;
/// The current media config that was set.
@property (nonatomic, strong) MediaConfig * _Nullable mediaConfig;
/// The media playback type.
@property (nonatomic, readonly, copy) NSString * _Nullable playbackType;
/// Load the media to the player.
- (void)loadMediaFrom:(PKMediaSource * _Nullable)mediaSource handler:(id <AssetHandler> _Nonnull)handler;
/// Plays the live media from the live edge.
- (void)playFromLiveEdge;
/// Update the text tracks styling.
- (void)updateTextTrackStyling:(PKTextTrackStyling * _Nonnull)textTrackStyling;
@end


SWIFT_CLASS("_TtC7PlayKit15AVPlayerWrapper")
@interface AVPlayerWrapper : NSObject <PlayerEngine>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) void (^ _Nullable onEventBlock)(PKEvent * _Nonnull);
@property (nonatomic) NSTimeInterval startPosition;
@property (nonatomic) NSTimeInterval currentPosition;
@property (nonatomic, strong) MediaConfig * _Nullable mediaConfig;
@property (nonatomic, readonly, copy) NSString * _Nullable playbackType;
- (void)loadMediaFrom:(PKMediaSource * _Nullable)mediaSource handler:(id <AssetHandler> _Nonnull)handler;
- (void)playFromLiveEdge;
- (void)updateTextTrackStyling:(PKTextTrackStyling * _Nonnull)textTrackStyling;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) enum PlayerState currentState;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic, weak) PlayerView * _Nullable view;
@property (nonatomic) NSTimeInterval currentTime;
@property (nonatomic, readonly, copy) NSDate * _Nullable currentProgramTime;
@property (nonatomic, readonly, copy) NSString * _Nullable currentAudioTrack;
@property (nonatomic, readonly, copy) NSString * _Nullable currentTextTrack;
@property (nonatomic) float rate;
@property (nonatomic) float volume;
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable loadedTimeRanges;
- (void)play;
- (void)pause;
- (void)resume;
- (void)stop;
- (void)replay;
- (void)seekTo:(NSTimeInterval)time;
- (void)selectTrackWithTrackId:(NSString * _Nonnull)trackId;
- (void)destroy;
- (void)prepare:(MediaConfig * _Nonnull)mediaConfig;
- (void)startBuffering;
@end



/// PKEvent
SWIFT_CLASS("_TtC7PlayKit7PKEvent")
@interface PKEvent : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable data;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit7AdEvent")
@interface AdEvent : PKEvent
/// <hr/>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SWIFT_METATYPE(AdEvent)> * _Nonnull allEventTypes;)
+ (NSArray<SWIFT_METATYPE(AdEvent)> * _Nonnull)allEventTypes SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull streamLoaded;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)streamLoaded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull streamStarted;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)streamStarted SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adBreakReady;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adBreakReady SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adBreakStarted;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adBreakStarted SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adBreakEnded;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adBreakEnded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adPeriodStarted;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adPeriodStarted SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adPeriodEnded;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adPeriodEnded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull allAdsCompleted;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)allAdsCompleted SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adComplete;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adComplete SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adClicked;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adClicked SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adFirstQuartile;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adFirstQuartile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adLoaded;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adLoaded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adLog;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adLog SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adMidpoint;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adMidpoint SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adPaused;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adPaused SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adResumed;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adResumed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adSkipped;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adSkipped SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adStarted;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adStarted SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adTapped;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adTapped SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adThirdQuartile;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adThirdQuartile SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adDidProgressToTime;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adDidProgressToTime SWIFT_WARN_UNUSED_RESULT;
/// Ad requested the content to pause (before ad starts playing)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adDidRequestContentPause;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adDidRequestContentPause SWIFT_WARN_UNUSED_RESULT;
/// Ad requested content resume (when finished playing ads or when error occurs and playback needs to continue)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adDidRequestContentResume;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adDidRequestContentResume SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull webOpenerEvent;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)webOpenerEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerWillOpenExternalBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerWillOpenExternalBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerWillOpenInAppBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerWillOpenInAppBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerDidOpenInAppBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerDidOpenInAppBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerWillCloseInAppBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerWillCloseInAppBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adWebOpenerDidCloseInAppBrowser;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adWebOpenerDidCloseInAppBrowser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adCuePointsUpdate;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adCuePointsUpdate SWIFT_WARN_UNUSED_RESULT;
/// Sent when an ad started buffering
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adStartedBuffering;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adStartedBuffering SWIFT_WARN_UNUSED_RESULT;
/// Sent when ad finished buffering and ready for playback
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adPlaybackReady;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adPlaybackReady SWIFT_WARN_UNUSED_RESULT;
/// Sent when the ads request timed out.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull requestTimedOut;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)requestTimedOut SWIFT_WARN_UNUSED_RESULT;
/// delivered when ads request was sent.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull adsRequested;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)adsRequested SWIFT_WARN_UNUSED_RESULT;
/// Sent when an error occurs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(AdEvent) _Nonnull error;)
+ (SWIFT_METATYPE(AdEvent) _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit15AdEventDataKeys")
@interface AdEventDataKeys : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The position type of the ad according to the content timeline.
typedef SWIFT_ENUM(NSInteger, AdPositionType, closed) {
  AdPositionTypePreRoll = 0,
  AdPositionTypeMidRoll = 1,
  AdPositionTypePostRoll = 2,
};


SWIFT_CLASS("_TtC7PlayKit19PlayerEngineWrapper")
@interface PlayerEngineWrapper : NSObject <PlayerEngine>
@property (nonatomic, copy) void (^ _Nullable onEventBlock)(PKEvent * _Nonnull);
@property (nonatomic) NSTimeInterval startPosition;
@property (nonatomic) NSTimeInterval currentPosition;
@property (nonatomic, strong) MediaConfig * _Nullable mediaConfig;
@property (nonatomic, readonly, copy) NSString * _Nullable playbackType;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) enum PlayerState currentState;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic, strong) PlayerView * _Nullable view;
@property (nonatomic) NSTimeInterval currentTime;
@property (nonatomic, readonly, copy) NSDate * _Nullable currentProgramTime;
@property (nonatomic, readonly, copy) NSString * _Nullable currentAudioTrack;
@property (nonatomic, readonly, copy) NSString * _Nullable currentTextTrack;
@property (nonatomic) float rate;
@property (nonatomic) float volume;
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable loadedTimeRanges;
- (void)loadMediaFrom:(PKMediaSource * _Nullable)mediaSource handler:(id <AssetHandler> _Nonnull)handler;
- (void)playFromLiveEdge;
- (void)updateTextTrackStyling:(PKTextTrackStyling * _Nonnull)textTrackStyling;
- (void)play;
- (void)pause;
- (void)resume;
- (void)stop;
- (void)replay;
- (void)seekTo:(NSTimeInterval)time;
- (void)selectTrackWithTrackId:(NSString * _Nonnull)trackId;
- (void)destroy;
- (void)prepare:(MediaConfig * _Nonnull)config;
- (void)startBuffering;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit25AdsDAIPlayerEngineWrapper")
@interface AdsDAIPlayerEngineWrapper : PlayerEngineWrapper
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/// <hr/>
@property (nonatomic) NSTimeInterval currentPosition;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic) NSTimeInterval currentTime;
- (void)loadMediaFrom:(PKMediaSource * _Nullable)mediaSource handler:(id <AssetHandler> _Nonnull)handler;
- (void)play;
- (void)pause;
- (void)resume;
- (void)stop;
- (void)replay;
- (void)seekTo:(NSTimeInterval)time;
- (void)destroy;
- (void)prepare:(MediaConfig * _Nonnull)config;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class PKMediaEntry;
@class PKPlayerSettings;
enum MediaFormat : NSInteger;
@protocol PKController;
@protocol PKBoundary;

SWIFT_PROTOCOL("_TtP7PlayKit6Player_")
@protocol Player <BasicPlayer>
/// The player’s associated media entry.
@property (nonatomic, readonly, weak) PKMediaEntry * _Nullable mediaEntry;
/// The player’s settings.
@property (nonatomic, readonly, strong) PKPlayerSettings * _Nonnull settings;
/// The current media format.
@property (nonatomic, readonly) enum MediaFormat mediaFormat;
/// The player’s session id. the <code>sessionId</code> is initialized when the player loads.
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
/// Add Observation to relevant event.
- (void)addObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
/// Add Observation to relevant events.
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
/// Remove Observer for single event.
- (void)removeObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event;
/// Remove Observer for several events.
- (void)removeObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events;
/// Update Plugin Config.
- (void)updatePluginConfigWithPluginName:(NSString * _Nonnull)pluginName config:(id _Nonnull)config;
/// Updates the styling from the settings textTrackStyling object
- (void)updateTextTrackStyling;
/// Indicates if current media is Live.
///
/// returns:
/// returns true if it’s live.
- (BOOL)isLive SWIFT_WARN_UNUSED_RESULT;
/// Getter for playkit controllers.
/// \param type Required class type.
///
///
/// returns:
/// Relevant controller if exist.
- (id <PKController> _Nullable)getControllerWithType:(Class <PKController> _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// \param interval time interval for the periodic invocation.
///
/// \param dispatchQueue dispatch queue to observe changes on (nil value will use main).
///
/// \param block block to handle the observation.
///
///
/// returns:
/// A uuid token to represent the observation, used to later remove a single observation.
- (NSUUID * _Nonnull)addPeriodicObserverWithInterval:(NSTimeInterval)interval observeOn:(dispatch_queue_t _Nullable)dispatchQueue using:(void (^ _Nonnull)(NSTimeInterval))block SWIFT_WARN_UNUSED_RESULT;
/// Adds a boundary time observer for the selected boundaries in time (25%, 50%, 30s etc.)
/// attention:
/// if a boundary is crossed while seeking the observation <em>won’t be triggered</em>.
/// \param boundaries boundary objects.
///
/// \param dispatchQueue dispatch queue to observe changes on (nil value will use main).
///
/// \param block block to handle the observation with the observed boundary, block returns (time, boundary percentage).
///
///
/// returns:
/// A uuid token to represent the observation, used to later remove a single observation.
- (NSUUID * _Nonnull)addBoundaryObserverWithBoundaries:(NSArray<id <PKBoundary>> * _Nonnull)boundaries observeOn:(dispatch_queue_t _Nullable)dispatchQueue using:(void (^ _Nonnull)(NSTimeInterval, double))block SWIFT_WARN_UNUSED_RESULT;
/// removes a single periodic observer using the uuid provided when added the observation.
- (void)removePeriodicObserver:(NSUUID * _Nonnull)token;
/// removes a single boundary observer using the uuid provided when added the observation.
- (void)removeBoundaryObserver:(NSUUID * _Nonnull)token;
@end


SWIFT_CLASS("_TtC7PlayKit19PlayerDecoratorBase")
@interface PlayerDecoratorBase : NSObject <Player>
@property (nonatomic, readonly, weak) PKMediaEntry * _Nullable mediaEntry;
@property (nonatomic, readonly, strong) PKPlayerSettings * _Nonnull settings;
@property (nonatomic, readonly) enum MediaFormat mediaFormat;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
- (void)addObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
- (void)removeObserver:(id _Nonnull)observer event:(SWIFT_METATYPE(PKEvent) _Nonnull)event;
- (void)removeObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events;
- (void)updatePluginConfigWithPluginName:(NSString * _Nonnull)pluginName config:(id _Nonnull)config;
- (void)updateTextTrackStyling;
- (BOOL)isLive SWIFT_WARN_UNUSED_RESULT;
- (id <PKController> _Nullable)getControllerWithType:(Class <PKController> _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
- (NSUUID * _Nonnull)addPeriodicObserverWithInterval:(NSTimeInterval)interval observeOn:(dispatch_queue_t _Nullable)dispatchQueue using:(void (^ _Nonnull)(NSTimeInterval))block SWIFT_WARN_UNUSED_RESULT;
- (NSUUID * _Nonnull)addBoundaryObserverWithBoundaries:(NSArray<id <PKBoundary>> * _Nonnull)boundaries observeOn:(dispatch_queue_t _Nullable)dispatchQueue using:(void (^ _Nonnull)(NSTimeInterval, double))block SWIFT_WARN_UNUSED_RESULT;
- (void)removePeriodicObserver:(NSUUID * _Nonnull)token;
- (void)removeBoundaryObserver:(NSUUID * _Nonnull)token;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) enum PlayerState currentState;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic, weak) PlayerView * _Nullable view;
@property (nonatomic) NSTimeInterval currentTime;
@property (nonatomic, readonly, copy) NSDate * _Nullable currentProgramTime;
@property (nonatomic, readonly, copy) NSString * _Nullable currentAudioTrack;
@property (nonatomic, readonly, copy) NSString * _Nullable currentTextTrack;
@property (nonatomic) float rate;
@property (nonatomic) float volume;
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable loadedTimeRanges;
- (void)play;
- (void)pause;
- (void)resume;
- (void)stop;
- (void)replay;
- (void)seekTo:(NSTimeInterval)time;
- (void)selectTrackWithTrackId:(NSString * _Nonnull)trackId;
- (void)destroy;
- (void)prepare:(MediaConfig * _Nonnull)config;
- (void)startBuffering;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit26AdsEnabledPlayerController")
@interface AdsEnabledPlayerController : PlayerDecoratorBase
@property (nonatomic, readonly) BOOL isPlaying;
- (void)prepare:(MediaConfig * _Nonnull)config;
- (void)play;
- (void)resume;
- (void)pause;
- (void)stop;
- (void)destroy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC7PlayKit22AdsPlayerEngineWrapper")
@interface AdsPlayerEngineWrapper : PlayerEngineWrapper
@property (nonatomic, readonly) BOOL isPlaying;
- (void)prepare:(MediaConfig * _Nonnull)config;
- (void)play;
- (void)playFromLiveEdge;
- (void)resume;
- (void)pause;
- (void)stop;
- (void)destroy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC7PlayKit15AnalyticsConfig")
@interface AnalyticsConfig : NSObject
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull params;
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MessageBus;

/// The <code>PKPlugin</code> protocol defines all the properties and methods required to define a plugin object.
SWIFT_PROTOCOL("_TtP7PlayKit8PKPlugin_")
@protocol PKPlugin
/// The plugin name.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pluginName;)
+ (NSString * _Nonnull)pluginName SWIFT_WARN_UNUSED_RESULT;
/// The plugin version. The default (implemented in BasePlugin) is the plugin’s bundle <code>CFBundleShortVersionString</code>:
/// <code>Bundle(for: pluginClass).object(forInfoDictionaryKey: "CFBundleShortVersionString")</code>
/// Override this function to provide a version from a different source.
/// Example for overriding:
/// \code
///     @objc override public class var pluginVersion: String {
///         return "1.2.3"
///     }
///
/// \endcodeIf <code>CFBundleShortVersionString</code> wasn’t found (or is not a string), and no alternative implementation is
/// provided, the string “?.?.?” is used.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pluginVersion;)
+ (NSString * _Nonnull)pluginVersion SWIFT_WARN_UNUSED_RESULT;
/// The player associated with the plugin
@property (nonatomic, readonly, weak) id <Player> _Nullable player;
/// The messageBus associated with the plugin
@property (nonatomic, readonly, weak) MessageBus * _Nullable messageBus;
/// On first load. used for doing initialization for the first time with the media config.
- (nullable instancetype)initWithPlayer:(id <Player> _Nonnull)player pluginConfig:(id _Nullable)pluginConfig messageBus:(MessageBus * _Nonnull)messageBus error:(NSError * _Nullable * _Nullable)error;
/// On update media. used to update the plugin with new media config when available.
- (void)onUpdateMediaWithMediaConfig:(MediaConfig * _Nonnull)mediaConfig;
/// On update config. used to update the plugin config.
- (void)onUpdateConfigWithPluginConfig:(id _Nonnull)pluginConfig;
/// Called on player destroy.
- (void)destroy;
@end

@class PlayerEvent;

SWIFT_PROTOCOL("_TtP7PlayKit23AnalyticsPluginProtocol_")
@protocol AnalyticsPluginProtocol <PKPlugin>
/// Indicates if it first play.
@property (nonatomic) BOOL isFirstPlay;
/// List of events should be handled on plugin.
@property (nonatomic, readonly, copy) NSArray<SWIFT_METATYPE(PlayerEvent)> * _Nonnull playerEventsToRegister;
/// Event registrasion based on playerEventsToRegister array.
- (void)registerEvents;
/// unregister all registered events.
- (void)unregisterEvents;
@end

@class AVURLAsset;

SWIFT_PROTOCOL("_TtP7PlayKit12AssetHandler_")
@protocol AssetHandler
- (nonnull instancetype)init;
- (void)buildFrom:(PKMediaSource * _Nonnull)mediaSource readyCallback:(void (^ _Nonnull)(NSError * _Nullable, AVURLAsset * _Nullable))readyCallback;
@end


/// class <code>BasePlugin</code> is a base plugin object used for plugin subclasses
SWIFT_CLASS("_TtC7PlayKit10BasePlugin")
@interface BasePlugin : NSObject <PKPlugin>
/// abstract implementation subclasses will have names
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pluginName;)
+ (NSString * _Nonnull)pluginName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pluginVersion;)
+ (NSString * _Nonnull)pluginVersion SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <Player> _Nullable player;
@property (nonatomic, weak) MessageBus * _Nullable messageBus;
- (nullable instancetype)initWithPlayer:(id <Player> _Nonnull)player pluginConfig:(id _Nullable)pluginConfig messageBus:(MessageBus * _Nonnull)messageBus error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (void)onUpdateMediaWithMediaConfig:(MediaConfig * _Nonnull)mediaConfig;
- (void)onUpdateConfigWithPluginConfig:(id _Nonnull)pluginConfig;
- (void)destroy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit19BaseAnalyticsPlugin")
@interface BaseAnalyticsPlugin : BasePlugin <AnalyticsPluginProtocol>
/// indicates whether we played for the first time or not.
@property (nonatomic) BOOL isFirstPlay;
/// <hr/>
- (nullable instancetype)initWithPlayer:(id <Player> _Nonnull)player pluginConfig:(id _Nullable)pluginConfig messageBus:(MessageBus * _Nonnull)messageBus error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (void)onUpdateMediaWithMediaConfig:(MediaConfig * _Nonnull)mediaConfig;
- (void)onUpdateConfigWithPluginConfig:(id _Nonnull)pluginConfig;
- (void)destroy;
@property (nonatomic, readonly, copy) NSArray<SWIFT_METATYPE(PlayerEvent)> * _Nonnull playerEventsToRegister;
- (void)registerEvents;
- (void)unregisterEvents;
@end




SWIFT_CLASS("_TtC7PlayKit8CuePoint")
@interface CuePoint : NSObject
@property (nonatomic, readonly) NSTimeInterval startTime;
@property (nonatomic, readonly) NSTimeInterval endTime;
@property (nonatomic, readonly) BOOL played;
- (nonnull instancetype)initWithStartTime:(NSTimeInterval)startTime endTime:(NSTimeInterval)endTime played:(BOOL)played OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit9DRMParams")
@interface DRMParams : NSObject
+ (DRMParams * _Nullable)fromJSON:(id _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, Scheme, closed) {
  SchemeWidevineCenc = 0,
  SchemePlayreadyCenc = 1,
  SchemeWidevineClassic = 2,
  SchemeFairplay = 3,
  SchemeUnknown = 4,
};


SWIFT_PROTOCOL("_TtP7PlayKit14LocalDataStore_")
@protocol LocalDataStore
- (BOOL)saveWithKey:(NSString * _Nonnull)key value:(NSData * _Nonnull)value error:(NSError * _Nullable * _Nullable)error;
- (NSData * _Nullable)loadWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
- (BOOL)existsWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


/// Implementation of LocalDataStore that saves data to files in the Library directory.
SWIFT_CLASS("_TtC7PlayKit21DefaultLocalDataStore")
@interface DefaultLocalDataStore : NSObject <LocalDataStore>
+ (DefaultLocalDataStore * _Nullable)defaultDataStore SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithDirectory:(NSSearchPathDirectory)directory error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)saveWithKey:(NSString * _Nonnull)key value:(NSData * _Nonnull)value error:(NSError * _Nullable * _Nullable)error;
- (NSData * _Nullable)loadWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)existsWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
@end


SWIFT_CLASS("_TtC7PlayKit17FPSExpirationInfo")
@interface FPSExpirationInfo : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nonnull expirationDate;
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit17FairPlayDRMParams")
@interface FairPlayDRMParams : DRMParams
@property (nonatomic, copy) NSData * _Nullable fpsCertificate;
- (nonnull instancetype)initWithLicenseUri:(NSString * _Nonnull)licenseUri scheme:(enum Scheme)scheme base64EncodedCertificate:(NSString * _Nonnull)base64EncodedCertificate OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use init(licenseUri:base64EncodedCertificate:) instead");
- (nonnull instancetype)initWithLicenseUri:(NSString * _Nonnull)licenseUri base64EncodedCertificate:(NSString * _Nonnull)base64EncodedCertificate OBJC_DESIGNATED_INITIALIZER;
@end

@class PKRequestParams;

SWIFT_PROTOCOL("_TtP7PlayKit23FairPlayLicenseProvider_")
@protocol FairPlayLicenseProvider
- (void)getLicenseWithSpc:(NSData * _Nonnull)spc assetId:(NSString * _Nonnull)assetId requestParams:(PKRequestParams * _Nonnull)requestParams callback:(void (^ _Nonnull)(NSData * _Nullable, NSTimeInterval, NSError * _Nullable))callback;
@end


/// <code>PKRequestParamsDecorator</code> used for getting updated request info
SWIFT_PROTOCOL("_TtP7PlayKit22PKRequestParamsAdapter_")
@protocol PKRequestParamsAdapter
/// Called when need to update the request adapter with information from the player.
/// Use this to update the adapter with any information available from the player.
/// For example, when media session id changes.
- (void)updateRequestAdapterWith:(id <Player> _Nonnull)player;
- (PKRequestParams * _Nonnull)adaptWithRequestParams:(PKRequestParams * _Nonnull)requestParams SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7PlayKit29KalturaPlaybackRequestAdapter")
@interface KalturaPlaybackRequestAdapter : NSObject <PKRequestParamsAdapter>
/// Installs a new kaltura request adapter on the provided player with custom application name.
/// \param player The player you want to use with the request adapter
///
/// \param appName the application name, if <code>nil</code> will use the bundle identifier.
///
+ (void)installIn:(id <Player> _Nonnull)player withAppName:(NSString * _Nonnull)appName;
/// Updates the request adapter with info from the player
- (void)updateRequestAdapterWith:(id <Player> _Nonnull)player;
/// Adapts the request params
- (PKRequestParams * _Nonnull)adaptWithRequestParams:(PKRequestParams * _Nonnull)requestParams SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit32KalturaUDRMLicenseRequestAdapter")
@interface KalturaUDRMLicenseRequestAdapter : NSObject <PKRequestParamsAdapter>
/// Installs a new kaltura request adapter on the provided player with custom application name.
/// \param player The player you want to use with the request adapter
///
/// \param appName the application name, if <code>nil</code> will use the bundle identifier.
///
+ (void)installIn:(id <Player> _Nonnull)player withAppName:(NSString * _Nonnull)appName;
/// Updates the request adapter with info from the player
- (void)updateRequestAdapterWith:(id <Player> _Nonnull)player;
/// Adapts the request params
- (PKRequestParams * _Nonnull)adaptWithRequestParams:(PKRequestParams * _Nonnull)requestParams SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A <code>MediaConfig</code> object defines behavior and info to use when preparing a <code>Player</code> object.
SWIFT_CLASS("_TtC7PlayKit11MediaConfig")
@interface MediaConfig : NSObject
@property (nonatomic, strong) PKMediaEntry * _Nonnull mediaEntry;
@property (nonatomic) NSTimeInterval startTime;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithMediaEntry:(PKMediaEntry * _Nonnull)mediaEntry OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMediaEntry:(PKMediaEntry * _Nonnull)mediaEntry startTime:(NSTimeInterval)startTime OBJC_DESIGNATED_INITIALIZER;
+ (MediaConfig * _Nonnull)configWithMediaEntry:(PKMediaEntry * _Nonnull)mediaEntry SWIFT_WARN_UNUSED_RESULT;
+ (MediaConfig * _Nonnull)configWithMediaEntry:(PKMediaEntry * _Nonnull)mediaEntry startTime:(NSTimeInterval)startTime SWIFT_WARN_UNUSED_RESULT;
/// Private init.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MediaConfig (SWIFT_EXTENSION(PlayKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP7PlayKit18MediaEntryProvider_")
@protocol MediaEntryProvider
/// This method is triggering the creation of media base on custom parameters and actions.
/// <h2>Important:</h2>
/// <ul>
///   <li>
///     In order to write custom provider you should implement this method
///   </li>
///   <li>
///     In order to send an informative error in the ResponseElement
///     you should implement an error enum with the relevnat errors
///   </li>
/// </ul>
/// \code
///    // example of usage:
///     let cp : MediaEntryProvider =
///        CustomMediaEntryProvider(customParameters)
///
///     customMediaProvider.loadMedia { 
///        (r:ResponseElement<PKMediaEntry>) in
///         if (r.succedded){
///         ...
///
/// \endcode\param callback - a block that called on completion and returing response object wich contain the PKMediaEntry 
///
- (void)loadMediaWithCallback:(void (^ _Nonnull)(PKMediaEntry * _Nullable, NSError * _Nullable))callback;
- (void)cancel;
@end

typedef SWIFT_ENUM(NSInteger, MediaType, closed) {
  MediaTypeDvrLive = 0,
  MediaTypeLive = 1,
  MediaTypeVod = 2,
  MediaTypeUnknown = 3,
};


/// <code>MessageBus</code> object handles all event message observing and posting
SWIFT_CLASS("_TtC7PlayKit10MessageBus")
@interface MessageBus : NSObject
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
- (void)addObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events observeOn:(dispatch_queue_t _Nonnull)dispatchQueue block:(void (^ _Nonnull)(PKEvent * _Nonnull))block;
- (void)removeObserver:(id _Nonnull)observer events:(NSArray<SWIFT_METATYPE(PKEvent)> * _Nonnull)events;
- (void)post:(PKEvent * _Nonnull)event;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit22MockMediaEntryProvider")
@interface MockMediaEntryProvider : NSObject <MediaEntryProvider>
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic) id _Nullable content;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)loadMediaWithCallback:(void (^ _Nonnull)(PKMediaEntry * _Nullable, NSError * _Nullable))callback;
- (void)cancel;
@end


SWIFT_CLASS("_TtC7PlayKit13PKAdCuePoints")
@interface PKAdCuePoints : NSObject
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull cuePoints;
- (nonnull instancetype)initWithCuePoints:(NSArray<NSNumber *> * _Nonnull)cuePoints OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSInteger count;
@property (nonatomic, readonly) BOOL hasPreRoll;
@property (nonatomic, readonly) BOOL hasMidRoll;
@property (nonatomic, readonly) BOOL hasPostRoll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit16PKAdDAICuePoints")
@interface PKAdDAICuePoints : NSObject
@property (nonatomic, readonly, copy) NSArray<CuePoint *> * _Nonnull cuePoints;
- (nonnull instancetype)init:(NSArray<CuePoint *> * _Nonnull)cuePoints OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL hasPreRoll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>PKAdInfo</code> represents ad information.
SWIFT_CLASS("_TtC7PlayKit8PKAdInfo")
@interface PKAdInfo : NSObject
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic, copy) NSString * _Nonnull title;
/// The position of the pod in the content in seconds. Pre-roll returns 0,
/// post-roll returns -1 and mid-rolls return the scheduled time of the pod.
@property (nonatomic) NSTimeInterval timeOffset;
@property (nonatomic, copy) NSString * _Nonnull adDescription;
@property (nonatomic) BOOL isSkippable;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@property (nonatomic, copy) NSString * _Nonnull adId;
/// The source ad server information included in the ad response.
@property (nonatomic, copy) NSString * _Nonnull adSystem;
@property (nonatomic) NSInteger height;
@property (nonatomic) NSInteger width;
/// Total number of ads in the pod this ad belongs to. Will be 1 for standalone ads.
@property (nonatomic) NSInteger totalAds;
/// The position of this ad within an ad pod. Will be 1 for standalone ads.
@property (nonatomic) NSInteger adPosition;
@property (nonatomic) BOOL isBumper;
@property (nonatomic) NSInteger podIndex;
@property (nonatomic) NSInteger mediaBitrate;
@property (nonatomic, copy) NSString * _Nonnull creativeId;
@property (nonatomic, copy) NSString * _Nonnull advertiserName;
/// returns the position type of the ad (pre, mid, post)
@property (nonatomic, readonly) enum AdPositionType positionType;
- (nonnull instancetype)initWithAdDescription:(NSString * _Nonnull)adDescription adDuration:(NSTimeInterval)adDuration title:(NSString * _Nonnull)title isSkippable:(BOOL)isSkippable contentType:(NSString * _Nonnull)contentType adId:(NSString * _Nonnull)adId adSystem:(NSString * _Nonnull)adSystem height:(NSInteger)height width:(NSInteger)width totalAds:(NSInteger)totalAds adPosition:(NSInteger)adPosition timeOffset:(NSTimeInterval)timeOffset isBumper:(BOOL)isBumper podIndex:(NSInteger)podIndex mediaBitrate:(NSInteger)mediaBitrate creativeId:(NSString * _Nonnull)creativeId advertiserName:(NSString * _Nonnull)advertiserName OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>PKBoundary</code> used as abstract for boundary types (% and time).
SWIFT_PROTOCOL("_TtP7PlayKit10PKBoundary_")
@protocol PKBoundary
@property (nonatomic, readonly) NSTimeInterval time;
@end

@class PKPercentageTimeBoundary;
@class PKTimeBoundary;

/// <code>PKBoundaryFactory</code> factory class used to create boundary objects easily.
SWIFT_CLASS("_TtC7PlayKit17PKBoundaryFactory")
@interface PKBoundaryFactory : NSObject
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (PKPercentageTimeBoundary * _Nonnull)percentageTimeBoundaryWithBoundary:(NSInteger)boundary SWIFT_WARN_UNUSED_RESULT;
- (PKTimeBoundary * _Nonnull)timeBoundaryWithBoundaryTime:(NSTimeInterval)boundaryTime SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7PlayKit12PKController_")
@protocol PKController
- (nonnull instancetype)initWithPlayer:(id <PlayerEngine> _Nullable)player;
@end


/// <hr/>
SWIFT_CLASS("_TtC7PlayKit11PKErrorCode")
@interface PKErrorCode : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FailedToLoadAssetFromKeys;)
+ (NSInteger)FailedToLoadAssetFromKeys SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger AssetNotPlayable;)
+ (NSInteger)AssetNotPlayable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PlayerItemFailed;)
+ (NSInteger)PlayerItemFailed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PlayerFailed;)
+ (NSInteger)PlayerFailed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MissingDependency;)
+ (NSInteger)MissingDependency SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PlayerItemErrorLogEvent;)
+ (NSInteger)PlayerItemErrorLogEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FailedToCreatePlugin;)
+ (NSInteger)FailedToCreatePlugin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MissingPluginConfig;)
+ (NSInteger)MissingPluginConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <hr/>
SWIFT_CLASS("_TtC7PlayKit13PKErrorDomain")
@interface PKErrorDomain : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Plugin;)
+ (NSString * _Nonnull)Plugin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Player;)
+ (NSString * _Nonnull)Player SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSNumber;
@class NSError;

@interface PKEvent (SWIFT_EXTENSION(PlayKit))
/// MediaTime, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable adMediaTime;
/// TotalTime, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable adTotalTime;
/// WebOpener, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) NSObject * _Nullable adWebOpener;
/// Associated error from error event, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) NSError * _Nullable adError;
/// Ad cue points, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) PKAdCuePoints * _Nullable adCuePoints;
/// Ad DAI cue points, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) PKAdDAICuePoints * _Nullable adDAICuePoints;
/// TotalTime, PKEvent Ad Data Accessor
@property (nonatomic, readonly, copy) NSString * _Nullable adTagUrl;
/// Ad info, PKEvent Ad Data Accessor
@property (nonatomic, readonly, strong) PKAdInfo * _Nullable adInfo;
@end

@class PKTracks;
@class Track;
@class PKPlaybackInfo;
@class AVMetadataItem;

@interface PKEvent (SWIFT_EXTENSION(PlayKit))
/// Duration Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable duration;
/// Current Time Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable currentTime;
/// Duration Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable targetSeekPosition;
/// Tracks Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) PKTracks * _Nullable tracks;
/// Selected Track Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) Track * _Nullable selectedTrack;
/// Indicated Bitrate, PKEvent Data Accessor
@property (nonatomic, readonly, strong) NSNumber * _Nullable bitrate;
/// Current Bitrate Value, PKEvent Data Accessor
@property (nonatomic, readonly, strong) PKPlaybackInfo * _Nullable playbackInfo;
/// Current Old State Value, PKEvent Data Accessor
@property (nonatomic, readonly) enum PlayerState oldState;
/// Current New State Value, PKEvent Data Accessor
@property (nonatomic, readonly) enum PlayerState newState;
/// Associated error from error event, PKEvent Data Accessor
@property (nonatomic, readonly, strong) NSError * _Nullable error;
/// Associated metadata from the event, PKEvent Data Accessor
@property (nonatomic, readonly, copy) NSArray<AVMetadataItem *> * _Nullable timedMetadata;
/// Content url, PKEvent Data Accessor
@property (nonatomic, readonly, strong) PKMediaSource * _Nullable mediaSource;
/// Content url, PKEvent Data Accessor
@property (nonatomic, readonly, copy) NSArray<PKTimeRange *> * _Nullable timeRanges;
@end


SWIFT_CLASS("_TtC7PlayKit18PKExternalSubtitle")
@interface PKExternalSubtitle : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
@property (nonatomic, readonly, copy) NSString * _Nonnull vttURLString;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) BOOL isDefault;
@property (nonatomic, readonly) BOOL autoSelect;
@property (nonatomic, readonly) BOOL forced;
@property (nonatomic, readonly, copy) NSString * _Nonnull characteristics;
/// Initializes a new PKExternalSubtitle which enables the configuration of external subtitles.
/// \param id The value is used in order to identify the specific subtitle from the others.
///
/// \param name The value is a quoted-string containing a human-readable description of the Rendition.
///
/// \param language The value is a one of the standard Tags for Identifying Languages [RFC5646], which identifies the primary language used in the Rendition.
///
/// \param vttURLString This is the string URL of the vtt.
///
/// \param duration This is the media’s duration.
///
/// \param isDefault If the value is true, then the client SHOULD play this Rendition of the content in the absence of information from the user indicating a different choice. This attribute is OPTIONAL. It’s absence indicates an implicit value of false.
///
/// \param autoSelect If the value is true, then the client MAY choose to play this Rendition in the absence of explicit user preference because it matches the current playback environment, such as chosen system language. This attribute is OPTIONAL.  Its absence indicates an implicit value of false.
///
/// \param forced A value of true indicates that the Rendition contains content that is considered essential to play. When selecting a FORCED Rendition, a client SHOULD choose the one that best matches the current playback environment (e.g., language). This attribute is OPTIONAL. It’s absence indicates an implicit value of false.
///
/// \param characteristics The value contains one or more Uniform Type Identifiers [UTI] separated by comma (,) characters. This attribute is OPTIONAL. Each UTI indicates an individual characteristic of the Rendition.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name language:(NSString * _Nonnull)language vttURLString:(NSString * _Nonnull)vttURLString duration:(double)duration isDefault:(BOOL)isDefault autoSelect:(BOOL)autoSelect forced:(BOOL)forced characteristics:(NSString * _Nullable)characteristics OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>PKLogLevel</code> describes the available log levels.
typedef SWIFT_ENUM(NSInteger, PKLogLevel, closed) {
  PKLogLevelVerbose = 0,
  PKLogLevelDebug = 1,
  PKLogLevelInfo = 2,
  PKLogLevelWarning = 3,
  PKLogLevelError = 4,
};


SWIFT_CLASS("_TtC7PlayKit12PKMediaEntry")
@interface PKMediaEntry : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSArray<PKMediaSource *> * _Nullable sources;
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic) enum MediaType mediaType;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSArray<PKExternalSubtitle *> * _Nullable externalSubtitles;
- (nonnull instancetype)init:(NSString * _Nonnull)id sources:(NSArray<PKMediaSource *> * _Nonnull)sources duration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithJson:(id _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit13PKMediaSource")
@interface PKMediaSource : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSURL * _Nullable contentUrl;
@property (nonatomic, copy) NSString * _Nullable mimeType;
@property (nonatomic, copy) NSArray<DRMParams *> * _Nullable drmData;
@property (nonatomic) enum MediaFormat mediaFormat;
@property (nonatomic, copy) NSArray<PKExternalSubtitle *> * _Nullable externalSubtitle;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
- (nonnull instancetype)init:(NSString * _Nonnull)id contentUrl:(NSURL * _Nullable)contentUrl mimeType:(NSString * _Nullable)mimeType drmData:(NSArray<DRMParams *> * _Nullable)drmData mediaFormat:(enum MediaFormat)mediaFormat OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithJson:(id _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MediaFormat, closed) {
  MediaFormatHls = 0,
  MediaFormatWvm = 1,
  MediaFormatMp4 = 2,
  MediaFormatMp3 = 3,
  MediaFormatUnknown = 4,
};



SWIFT_CLASS("_TtC7PlayKit17PKNetworkSettings")
@interface PKNetworkSettings : NSObject
/// Indicates the desired limit of network bandwidth consumption for this item.
/// Set preferredPeakBitRate to non-zero to indicate that the player should attempt to limit item playback to that bit rate, expressed in bits per second.
/// If network bandwidth consumption cannot be lowered to meet the preferredPeakBitRate, it will be reduced as much as possible while continuing to play the item.
/// @available(iOS 8.0, *) via AVPlayerItem
@property (nonatomic) double preferredPeakBitRate;
/// Indicates the media duration the caller prefers the player to buffer from the network ahead of the playhead to guard against playback disruption.
/// The value is in seconds. If it is set to 0, the player will choose an appropriate level of buffering for most use cases.
/// Note that setting this property to a low value will increase the chance that playback will stall and re-buffer, while setting it to a high value will increase demand on system resources.
/// Note that the system may buffer less than the value of this property in order to manage resource consumption.
/// @available(iOS 10.0, *) via AVPlayerItem
@property (nonatomic) double preferredForwardBufferDuration;
/// Indicates that the player is allowed to delay playback at the specified rate in order to minimize stalling
/// For further details please see Apple’s documentation: https://developer.apple.com/documentation/avfoundation/avplayer/1643482-automaticallywaitstominimizestal
/// @available(iOS 10.0, tvOS 10.0, *) via AVPlayer
@property (nonatomic) BOOL automaticallyWaitsToMinimizeStalling;
/// Tells the player whether or not to buffer the media, or stop after initializing the asset and fetching the keys.
/// Default value is true, initialize the asset, fetch the keys and buffer the media.
/// If the value is set to false, the player will stop after initializing the asset and fetching the keys. A manual call to player startBuffering is needed.
/// This comes in handy when you would like to divide between the views and initialize the media before the user interacts with the player to show it, start buffering and playing.
/// In another case if you would like to start initializing the next media without buffering it, so that once the media is switched to the next one, it will be smother.
@property (nonatomic) BOOL autoBuffer;
- (PKNetworkSettings * _Nonnull)createCopy SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>PKPercentageTimeBoundary</code> represents a time boundary in % against the media duration.
SWIFT_CLASS("_TtC7PlayKit24PKPercentageTimeBoundary")
@interface PKPercentageTimeBoundary : NSObject <PKBoundary>
/// The time to set the boundary on.
@property (nonatomic, readonly) NSTimeInterval time;
/// Creates a new <code>PKPercentageTimeBoundary</code> object from %.
/// attention:
/// boundary value should be between 1 and 100 otherwise will use default values!
- (nonnull instancetype)initWithBoundary:(NSInteger)boundary duration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>PKPlaybackInfo</code> represents a playback info object.
SWIFT_CLASS("_TtC7PlayKit14PKPlaybackInfo")
@interface PKPlaybackInfo : NSObject
/// The actual bitrate of the playback.
@property (nonatomic, readonly) double bitrate;
/// The selected track indicated bitrate.
@property (nonatomic, readonly) double indicatedBitrate;
/// The throughput of the playback (download speed)
@property (nonatomic, readonly) double observedBitrate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PKTrackSelectionSettings;

SWIFT_CLASS("_TtC7PlayKit16PKPlayerSettings")
@interface PKPlayerSettings : NSObject
@property (nonatomic) BOOL cea608CaptionsEnabled;
/// The settings for network data consumption.
@property (nonatomic, strong) PKNetworkSettings * _Nonnull network;
@property (nonatomic, strong) PKTrackSelectionSettings * _Nonnull trackSelection;
@property (nonatomic, strong) PKTextTrackStyling * _Nonnull textTrackStyling;
@property (nonatomic, strong) id <PKRequestParamsAdapter> _Nullable contentRequestAdapter;
@property (nonatomic, strong) id <PKRequestParamsAdapter> _Nullable licenseRequestAdapter;
@property (nonatomic, strong) id <FairPlayLicenseProvider> _Nullable fairPlayLicenseProvider;
@property (nonatomic) BOOL allowFairPlayOnExternalScreens;
/// If this value is set to true, playImmediatelyAtRate will be called.
/// When the player’s currentItem has a value of NO for playbackBufferEmpty, this method causes the value of rate to change to the specified rate, the value of timeControlStatus to change to AVPlayerTimeControlStatusPlaying, and the receiver to play the available media immediately, whether or not prior buffering of media data is sufficient to ensure smooth playback.
/// If insufficient media data is buffered for playback to start (e.g. if the current item has a value of YES for playbackBufferEmpty), the receiver will act as if the buffer became empty during playback, except that no AVPlayerItemPlaybackStalledNotification will be posted.
/// @available(iOS 10.0, tvOS 10.0, *)
@property (nonatomic) BOOL shouldPlayImmediately;
- (PKPlayerSettings * _Nonnull)createCopy SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PKPlayerSettings (SWIFT_EXTENSION(PlayKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP7PlayKit14PKPluginWarmUp_")
@protocol PKPluginWarmUp
+ (void)warmUp;
@end


SWIFT_CLASS("_TtC7PlayKit15PKRequestParams")
@interface PKRequestParams : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable headers;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url headers:(NSDictionary<NSString *, NSString *> * _Nullable)headers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, PKTextMarkupCharacterEdgeStyle, closed) {
  PKTextMarkupCharacterEdgeStyleNone = 0,
  PKTextMarkupCharacterEdgeStyleRaised = 1,
  PKTextMarkupCharacterEdgeStyleDepressed = 2,
  PKTextMarkupCharacterEdgeStyleUniform = 3,
  PKTextMarkupCharacterEdgeStyleDropShadow = 4,
};

@class UIColor;

SWIFT_CLASS("_TtC7PlayKit18PKTextTrackStyling")
@interface PKTextTrackStyling : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (PKTextTrackStyling * _Nonnull)setTextColor:(UIColor * _Nonnull)color;
- (PKTextTrackStyling * _Nonnull)setBackgroundColor:(UIColor * _Nonnull)color;
- (PKTextTrackStyling * _Nonnull)setTextSizeWithPercentageOfVideoHeight:(NSInteger)percentageOfVideoHeight;
- (PKTextTrackStyling * _Nonnull)setEdgeStyle:(enum PKTextMarkupCharacterEdgeStyle)style;
- (PKTextTrackStyling * _Nonnull)setEdgeColor:(UIColor * _Nonnull)color;
- (PKTextTrackStyling * _Nonnull)setFontFamily:(NSString * _Nonnull)family;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>PKTimeBoundary</code> represents a time boundary in seconds.
SWIFT_CLASS("_TtC7PlayKit14PKTimeBoundary")
@interface PKTimeBoundary : NSObject <PKBoundary>
/// The time to set the boundary on.
@property (nonatomic, readonly) NSTimeInterval time;
/// Creates a new <code>PKTimeBoundary</code> object from seconds.
/// attention:
/// boundary value should be between 0 and duration otherwise will use default values!
- (nonnull instancetype)initWithBoundaryTime:(NSTimeInterval)boundaryTime duration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7PlayKit11PKTimeRange")
@interface PKTimeRange : NSObject
@property (nonatomic, readonly) NSTimeInterval start;
@property (nonatomic, readonly) NSTimeInterval end;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TrackSelectionMode : NSInteger;

SWIFT_CLASS("_TtC7PlayKit24PKTrackSelectionSettings")
@interface PKTrackSelectionSettings : NSObject
@property (nonatomic) enum TrackSelectionMode textSelectionMode;
@property (nonatomic, copy) NSString * _Nullable textSelectionLanguage;
@property (nonatomic) enum TrackSelectionMode audioSelectionMode;
@property (nonatomic, copy) NSString * _Nullable audioSelectionLanguage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit8PKTracks")
@interface PKTracks : NSObject
@property (nonatomic, copy) NSArray<Track *> * _Nullable audioTracks;
@property (nonatomic, copy) NSArray<Track *> * _Nullable textTracks;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ViewState : NSInteger;
@class UIView;

SWIFT_CLASS("_TtC7PlayKit14PKVRController")
@interface PKVRController : NSObject <PKController>
/// Represents current PKVRController view state
/// ViewState Options
/// <ul>
///   <li>
///     panorama
///   </li>
///   <li>
///     stereo
///   </li>
///   <li>
///     error
///   </li>
///   <li>
///     unknown
///   </li>
/// </ul>
@property (nonatomic, readonly) enum ViewState currentViewState;
/// <hr/>
- (nonnull instancetype)initWithPlayer:(id <PlayerEngine> _Nullable)player OBJC_DESIGNATED_INITIALIZER;
/// \param isVREnabled Toggle to enable vr mode.
///
- (void)setVRModeEnabled:(BOOL)isVREnabled;
/// Requests reset of rotation in the next rendering frame.
- (void)centerViewPoint;
/// Creates eye view indicator.
/// \param frame eye view frame
///
///
/// returns:
/// eye view indicator
- (UIView * _Nullable)createOrientationIndicatorViewWithFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PluginConfig;

/// Manager class used for:
/// <ul>
///   <li>
///     creating <code>Player</code> objects.
///   </li>
///   <li>
///     creating and registering plugins.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC7PlayKit14PlayKitManager")
@interface PlayKitManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionString;)
+ (NSString * _Nonnull)versionString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientTag;)
+ (NSString * _Nonnull)clientTag SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PlayKitManager * _Nonnull sharedInstance;)
+ (PlayKitManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Loads and returns a player object using a provided configuration.
/// important:
/// In order to start buffering the video after loading the player
/// you must call prepare on the player with the same configuration.
/// \code
///     player = PlayKitManager.sharedInstance.loadPlayer(config: config)
///     player.prepare(config)
///
/// \endcode\param pluginConfig The configuration object to load the player with.
///
///
/// returns:
/// A player loaded using the provided configuration.
- (id <Player> _Nonnull)loadPlayerWithPluginConfig:(PluginConfig * _Nullable)pluginConfig SWIFT_WARN_UNUSED_RESULT;
- (void)registerPlugin:(SWIFT_METATYPE(BasePlugin) _Nonnull)pluginClass;
- (NSDictionary<NSString *, NSString *> * _Nonnull)registeredPlugins SWIFT_WARN_UNUSED_RESULT;
/// sets the logging level for our logger.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum PKLogLevel logLevel;)
+ (enum PKLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum PKLogLevel)value;
@end






/// PlayerEvent is a class used to reflect player events.
SWIFT_CLASS("_TtC7PlayKit11PlayerEvent")
@interface PlayerEvent : PKEvent
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SWIFT_METATYPE(PlayerEvent)> * _Nonnull allEventTypes;)
+ (NSArray<SWIFT_METATYPE(PlayerEvent)> * _Nonnull)allEventTypes SWIFT_WARN_UNUSED_RESULT;
/// Sent when enough data is available that the media can be played, at least for a couple of frames.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull canPlay;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)canPlay SWIFT_WARN_UNUSED_RESULT;
/// The metadata has loaded or changed, indicating a change in duration of the media. This is sent, for example, when the media has loaded enough that the duration is known.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull durationChanged;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)durationChanged SWIFT_WARN_UNUSED_RESULT;
/// Sent when playback stopped.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull stopped;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)stopped SWIFT_WARN_UNUSED_RESULT;
/// Sent when playback completes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull ended;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)ended SWIFT_WARN_UNUSED_RESULT;
/// The media’s metadata has finished loading; all attributes now contain as much useful information as they’re going to.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull loadedMetadata;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)loadedMetadata SWIFT_WARN_UNUSED_RESULT;
/// Sent when playback of the media starts after having been paused; that is, when playback is resumed after a prior pause event.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull play;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)play SWIFT_WARN_UNUSED_RESULT;
/// Sent when playback is paused.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull pause;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)pause SWIFT_WARN_UNUSED_RESULT;
/// Sent when the media begins to play (either for the first time, after having been paused, or after ending and then restarting).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull playing;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)playing SWIFT_WARN_UNUSED_RESULT;
/// Sent when a seek operation begins.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull seeking;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)seeking SWIFT_WARN_UNUSED_RESULT;
/// Sent when a seek operation completes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull seeked;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)seeked SWIFT_WARN_UNUSED_RESULT;
/// Sent when a replay operation is performed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull replay;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)replay SWIFT_WARN_UNUSED_RESULT;
/// Sent when tracks available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull tracksAvailable;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)tracksAvailable SWIFT_WARN_UNUSED_RESULT;
/// Sent when text track has been changed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull textTrackChanged;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)textTrackChanged SWIFT_WARN_UNUSED_RESULT;
/// Sent when audio track has been changed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull audioTrackChanged;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)audioTrackChanged SWIFT_WARN_UNUSED_RESULT;
/// Sent when video track has been changed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull videoTrackChanged;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)videoTrackChanged SWIFT_WARN_UNUSED_RESULT;
/// Sent when Playback Params Updated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull playbackInfo;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)playbackInfo SWIFT_WARN_UNUSED_RESULT;
/// Sent when player state is changed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull stateChanged;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)stateChanged SWIFT_WARN_UNUSED_RESULT;
/// Sent when timed metadata is available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull timedMetadata;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)timedMetadata SWIFT_WARN_UNUSED_RESULT;
/// Sent when source was selected.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull sourceSelected;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)sourceSelected SWIFT_WARN_UNUSED_RESULT;
/// Sent when loaded time ranges was changed, loaded time ranges represent the buffered content.
/// Could be used to show amount buffered on the playhead UI.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull loadedTimeRanges;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)loadedTimeRanges SWIFT_WARN_UNUSED_RESULT;
/// Sent when the playhead (current time) has moved.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull playheadUpdate;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)playheadUpdate SWIFT_WARN_UNUSED_RESULT;
/// Sent when an error occurs in the player that the playback can recover from.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull error;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
/// Sent when an error log event received from player (non fatal errors).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull errorLog;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)errorLog SWIFT_WARN_UNUSED_RESULT;
/// Sent when the player has stalled. Buffering with no available data to play.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PlayerEvent) _Nonnull playbackStalled;)
+ (SWIFT_METATYPE(PlayerEvent) _Nonnull)playbackStalled SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@end

/// An PlayerState is an enum of different player states
typedef SWIFT_ENUM(NSInteger, PlayerState, closed) {
/// Sent when player’s state idle.
  PlayerStateIdle = 0,
/// Sent when player’s state ready.
  PlayerStateReady = 1,
/// Sent when player’s state buffering.
  PlayerStateBuffering = 2,
/// Sent when player’s state ended.
/// Same event sent when observing PlayerEvent.ended.
/// This state was attached to reflect current state and avoid unrelevant boolean.
  PlayerStateEnded = 3,
/// Sent when player’s state errored.
  PlayerStateError = 4,
/// Sent when player’s state unknown.
  PlayerStateUnknown = -1,
};

@class NSCoder;

/// A simple <code>UIView</code> subclass that is backed by an <code>AVPlayerLayer</code> layer.
SWIFT_CLASS("_TtC7PlayKit10PlayerView")
@interface PlayerView : UIView
@property (nonatomic) UIViewContentMode contentMode;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
/// adds the player view as a subview to the container view and sets up constraints
- (void)addToContainer:(UIView * _Nonnull)container;
/// creates a new <code>PlayerView</code> instance and connects it to the player
/// important:
/// make sure to keep strong reference for the player view instance (either from adding as subview or property),
/// otherwise it will be deallocated as the framework holds a weak reference to it
+ (PlayerView * _Nonnull)createPlayerViewForPlayer:(id <Player> _Nonnull)player SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>PluginConfig</code> object defines config to use when loading a plugin object.
SWIFT_CLASS("_TtC7PlayKit12PluginConfig")
@interface PluginConfig : NSObject
/// Plugins config dictionary holds [plugin name : plugin config]
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull config;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithConfig:(NSDictionary<NSString *, id> * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
/// Private init.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PluginConfig (SWIFT_EXTENSION(PlayKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7PlayKit11PluginEvent")
@interface PluginEvent : PKEvent
/// Sent when a plugin error occurs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PluginEvent) _Nonnull error;)
+ (SWIFT_METATYPE(PluginEvent) _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7PlayKit5Track")
@interface Track : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nullable language;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TrackSelectionMode, closed) {
  TrackSelectionModeOff = 0,
  TrackSelectionModeAuto = 1,
  TrackSelectionModeSelection = 2,
};


SWIFT_CLASS("_TtC7PlayKit13TracksManager")
@interface TracksManager : NSObject
- (Track * _Nullable)selectTrackWithItem:(AVPlayerItem * _Nonnull)item trackId:(NSString * _Nonnull)trackId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)currentAudioTrackWithItem:(AVPlayerItem * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)currentTextTrackWithItem:(AVPlayerItem * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7PlayKit14VRPlayerEngine_")
@protocol VRPlayerEngine <PlayerEngine>
/// VRPlayerEngine initializer
- (nonnull instancetype)init;
/// Current View State
@property (nonatomic, readonly) enum ViewState currentViewState;
/// Enable VR Mode - Stereo display for Google’s Cardboard.
/// \param isEnabled Toggle to enable vr mode.
///
- (void)setVRModeEnabled:(BOOL)isEnabled;
/// Requests reset of rotation in the next rendering frame.
- (void)centerViewPoint;
/// Creates the orientation indicator view.
/// \param frame The frame of orientation indicator view.
///
- (UIView * _Nullable)createOrientationIndicatorViewWithFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
@end

/// <hr/>
typedef SWIFT_ENUM(NSInteger, ViewState, closed) {
/// Sent when player’s view state panorama.
  ViewStatePanorama = 0,
/// Sent when player’s view state vr.
  ViewStateStereo = 1,
/// Sent when player’s view state errored.
  ViewStateError = 2,
/// Sent when player’s view state unknown.
  ViewStateUnknown = -1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif


#endif // merged by cocoapods-binary